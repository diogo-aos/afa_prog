% Options for packages loaded elsewhere
\PassOptionsToPackage{unicode}{hyperref}
\PassOptionsToPackage{hyphens}{url}
%
\documentclass[
  ignorenonframetext,
]{beamer}
\usepackage{pgfpages}
\setbeamertemplate{caption}[numbered]
\setbeamertemplate{caption label separator}{: }
\setbeamercolor{caption name}{fg=normal text.fg}
\beamertemplatenavigationsymbolsempty
% Prevent slide breaks in the middle of a paragraph
\widowpenalties 1 10000
\raggedbottom
\setbeamertemplate{part page}{
  \centering
  \begin{beamercolorbox}[sep=16pt,center]{part title}
    \usebeamerfont{part title}\insertpart\par
  \end{beamercolorbox}
}
\setbeamertemplate{section page}{
  \centering
  \begin{beamercolorbox}[sep=12pt,center]{part title}
    \usebeamerfont{section title}\insertsection\par
  \end{beamercolorbox}
}
\setbeamertemplate{subsection page}{
  \centering
  \begin{beamercolorbox}[sep=8pt,center]{part title}
    \usebeamerfont{subsection title}\insertsubsection\par
  \end{beamercolorbox}
}
\AtBeginPart{
  \frame{\partpage}
}
\AtBeginSection{
  \ifbibliography
  \else
    \frame{\sectionpage}
  \fi
}
\AtBeginSubsection{
  \frame{\subsectionpage}
}

\usepackage{amsmath,amssymb}
\usepackage{iftex}
\ifPDFTeX
  \usepackage[T1]{fontenc}
  \usepackage[utf8]{inputenc}
  \usepackage{textcomp} % provide euro and other symbols
\else % if luatex or xetex
  \usepackage{unicode-math}
  \defaultfontfeatures{Scale=MatchLowercase}
  \defaultfontfeatures[\rmfamily]{Ligatures=TeX,Scale=1}
\fi
\usepackage{lmodern}
\ifPDFTeX\else  
    % xetex/luatex font selection
\fi
% Use upquote if available, for straight quotes in verbatim environments
\IfFileExists{upquote.sty}{\usepackage{upquote}}{}
\IfFileExists{microtype.sty}{% use microtype if available
  \usepackage[]{microtype}
  \UseMicrotypeSet[protrusion]{basicmath} % disable protrusion for tt fonts
}{}
\makeatletter
\@ifundefined{KOMAClassName}{% if non-KOMA class
  \IfFileExists{parskip.sty}{%
    \usepackage{parskip}
  }{% else
    \setlength{\parindent}{0pt}
    \setlength{\parskip}{6pt plus 2pt minus 1pt}}
}{% if KOMA class
  \KOMAoptions{parskip=half}}
\makeatother
\usepackage{xcolor}
\newif\ifbibliography
\setlength{\emergencystretch}{3em} % prevent overfull lines
\setcounter{secnumdepth}{-\maxdimen} % remove section numbering

\usepackage{color}
\usepackage{fancyvrb}
\newcommand{\VerbBar}{|}
\newcommand{\VERB}{\Verb[commandchars=\\\{\}]}
\DefineVerbatimEnvironment{Highlighting}{Verbatim}{commandchars=\\\{\}}
% Add ',fontsize=\small' for more characters per line
\usepackage{framed}
\definecolor{shadecolor}{RGB}{241,243,245}
\newenvironment{Shaded}{\begin{snugshade}}{\end{snugshade}}
\newcommand{\AlertTok}[1]{\textcolor[rgb]{0.68,0.00,0.00}{#1}}
\newcommand{\AnnotationTok}[1]{\textcolor[rgb]{0.37,0.37,0.37}{#1}}
\newcommand{\AttributeTok}[1]{\textcolor[rgb]{0.40,0.45,0.13}{#1}}
\newcommand{\BaseNTok}[1]{\textcolor[rgb]{0.68,0.00,0.00}{#1}}
\newcommand{\BuiltInTok}[1]{\textcolor[rgb]{0.00,0.23,0.31}{#1}}
\newcommand{\CharTok}[1]{\textcolor[rgb]{0.13,0.47,0.30}{#1}}
\newcommand{\CommentTok}[1]{\textcolor[rgb]{0.37,0.37,0.37}{#1}}
\newcommand{\CommentVarTok}[1]{\textcolor[rgb]{0.37,0.37,0.37}{\textit{#1}}}
\newcommand{\ConstantTok}[1]{\textcolor[rgb]{0.56,0.35,0.01}{#1}}
\newcommand{\ControlFlowTok}[1]{\textcolor[rgb]{0.00,0.23,0.31}{#1}}
\newcommand{\DataTypeTok}[1]{\textcolor[rgb]{0.68,0.00,0.00}{#1}}
\newcommand{\DecValTok}[1]{\textcolor[rgb]{0.68,0.00,0.00}{#1}}
\newcommand{\DocumentationTok}[1]{\textcolor[rgb]{0.37,0.37,0.37}{\textit{#1}}}
\newcommand{\ErrorTok}[1]{\textcolor[rgb]{0.68,0.00,0.00}{#1}}
\newcommand{\ExtensionTok}[1]{\textcolor[rgb]{0.00,0.23,0.31}{#1}}
\newcommand{\FloatTok}[1]{\textcolor[rgb]{0.68,0.00,0.00}{#1}}
\newcommand{\FunctionTok}[1]{\textcolor[rgb]{0.28,0.35,0.67}{#1}}
\newcommand{\ImportTok}[1]{\textcolor[rgb]{0.00,0.46,0.62}{#1}}
\newcommand{\InformationTok}[1]{\textcolor[rgb]{0.37,0.37,0.37}{#1}}
\newcommand{\KeywordTok}[1]{\textcolor[rgb]{0.00,0.23,0.31}{#1}}
\newcommand{\NormalTok}[1]{\textcolor[rgb]{0.00,0.23,0.31}{#1}}
\newcommand{\OperatorTok}[1]{\textcolor[rgb]{0.37,0.37,0.37}{#1}}
\newcommand{\OtherTok}[1]{\textcolor[rgb]{0.00,0.23,0.31}{#1}}
\newcommand{\PreprocessorTok}[1]{\textcolor[rgb]{0.68,0.00,0.00}{#1}}
\newcommand{\RegionMarkerTok}[1]{\textcolor[rgb]{0.00,0.23,0.31}{#1}}
\newcommand{\SpecialCharTok}[1]{\textcolor[rgb]{0.37,0.37,0.37}{#1}}
\newcommand{\SpecialStringTok}[1]{\textcolor[rgb]{0.13,0.47,0.30}{#1}}
\newcommand{\StringTok}[1]{\textcolor[rgb]{0.13,0.47,0.30}{#1}}
\newcommand{\VariableTok}[1]{\textcolor[rgb]{0.07,0.07,0.07}{#1}}
\newcommand{\VerbatimStringTok}[1]{\textcolor[rgb]{0.13,0.47,0.30}{#1}}
\newcommand{\WarningTok}[1]{\textcolor[rgb]{0.37,0.37,0.37}{\textit{#1}}}

\providecommand{\tightlist}{%
  \setlength{\itemsep}{0pt}\setlength{\parskip}{0pt}}\usepackage{longtable,booktabs,array}
\usepackage{calc} % for calculating minipage widths
\usepackage{caption}
% Make caption package work with longtable
\makeatletter
\def\fnum@table{\tablename~\thetable}
\makeatother
\usepackage{graphicx}
\makeatletter
\def\maxwidth{\ifdim\Gin@nat@width>\linewidth\linewidth\else\Gin@nat@width\fi}
\def\maxheight{\ifdim\Gin@nat@height>\textheight\textheight\else\Gin@nat@height\fi}
\makeatother
% Scale images if necessary, so that they will not overflow the page
% margins by default, and it is still possible to overwrite the defaults
% using explicit options in \includegraphics[width, height, ...]{}
\setkeys{Gin}{width=\maxwidth,height=\maxheight,keepaspectratio}
% Set default figure placement to htbp
\makeatletter
\def\fps@figure{htbp}
\makeatother

\makeatletter
\makeatother
\makeatletter
\makeatother
\makeatletter
\@ifpackageloaded{caption}{}{\usepackage{caption}}
\AtBeginDocument{%
\ifdefined\contentsname
  \renewcommand*\contentsname{Table of contents}
\else
  \newcommand\contentsname{Table of contents}
\fi
\ifdefined\listfigurename
  \renewcommand*\listfigurename{List of Figures}
\else
  \newcommand\listfigurename{List of Figures}
\fi
\ifdefined\listtablename
  \renewcommand*\listtablename{List of Tables}
\else
  \newcommand\listtablename{List of Tables}
\fi
\ifdefined\figurename
  \renewcommand*\figurename{Figure}
\else
  \newcommand\figurename{Figure}
\fi
\ifdefined\tablename
  \renewcommand*\tablename{Table}
\else
  \newcommand\tablename{Table}
\fi
}
\@ifpackageloaded{float}{}{\usepackage{float}}
\floatstyle{ruled}
\@ifundefined{c@chapter}{\newfloat{codelisting}{h}{lop}}{\newfloat{codelisting}{h}{lop}[chapter]}
\floatname{codelisting}{Listing}
\newcommand*\listoflistings{\listof{codelisting}{List of Listings}}
\makeatother
\makeatletter
\@ifpackageloaded{caption}{}{\usepackage{caption}}
\@ifpackageloaded{subcaption}{}{\usepackage{subcaption}}
\makeatother
\makeatletter
\@ifpackageloaded{tcolorbox}{}{\usepackage[skins,breakable]{tcolorbox}}
\makeatother
\makeatletter
\@ifundefined{shadecolor}{\definecolor{shadecolor}{rgb}{.97, .97, .97}}
\makeatother
\makeatletter
\makeatother
\makeatletter
\makeatother
\ifLuaTeX
  \usepackage{selnolig}  % disable illegal ligatures
\fi
\IfFileExists{bookmark.sty}{\usepackage{bookmark}}{\usepackage{hyperref}}
\IfFileExists{xurl.sty}{\usepackage{xurl}}{} % add URL line breaks if available
\urlstyle{same} % disable monospaced font for URLs
\hypersetup{
  hidelinks,
  pdfcreator={LaTeX via pandoc}}

\author{}
\date{}

\begin{document}
\ifdefined\Shaded\renewenvironment{Shaded}{\begin{tcolorbox}[boxrule=0pt, enhanced, interior hidden, sharp corners, borderline west={3pt}{0pt}{shadecolor}, breakable, frame hidden]}{\end{tcolorbox}}\fi

\renewcommand*\contentsname{Table of contents}
\begin{frame}[allowframebreaks]
  \frametitle{Table of contents}
  \tableofcontents[hideallsubsections]
\end{frame}
\begin{frame}
\end{frame}

\begin{frame}{Leitura e escrita formatada}
\protect\hypertarget{leitura-e-escrita-formatada}{}
\begin{block}{Diogo Silva}
\protect\hypertarget{diogo-silva}{}
\begin{block}{CAP / ENGEL}
\protect\hypertarget{cap-engel}{}
dasilva@academiafa.edu.pt
\end{block}
\end{block}
\end{frame}

\begin{frame}[fragile]
\begin{block}{I/O formatado}
\protect\hypertarget{io-formatado}{}
O \texttt{printf} e \texttt{scanf} são 2 das funções mais usadas quando
programamos em C.

Ambas as funções permitem escrever/ler um número arbitrário de valores:

\begin{verbatim}
printf("string", expr1, ..., exprN);
scanf("string", &var1, ..., &varN);
\end{verbatim}

\begin{verbatim}
int altura, idade;
float massa, imc;
printf("Insira a idade e massa separadas por um espaco:");
scanf("%d %f", &altura, &massa);
printf("altura: %d\nmassa:%f\n", altura, massa);
\end{verbatim}

--

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{scanf("\%d \%f", \&altura, \&massa);}
\NormalTok{printf("altura: \%d\textbackslash{}nmassa:\%f\textbackslash{}n", altura, massa);}
\end{Highlighting}
\end{Shaded}

Quando usamos múltiplos descritores nestas funções, a correspondência
com as variáveis/expressões é feita por ordem sequencial: - linha 1: o
primeiro \texttt{\%d} corresponde à variável \texttt{altura},
\texttt{\%f} corresponde à \texttt{massa} - linha 2: idem

--

Os compiladores de C não são obrigados a verificar que o número de
descritores é coerente com o número de valores fornecidos.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{printf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%d}\StringTok{ }\SpecialCharTok{\%d}\StringTok{ }\SpecialCharTok{\%d\textbackslash{}n}\StringTok{"}\OperatorTok{,}\NormalTok{ i}\OperatorTok{);} \CommentTok{/*** ERRADO ***/}
\NormalTok{printf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%d\textbackslash{}n}\StringTok{"}\OperatorTok{,}\NormalTok{ i}\OperatorTok{,}\NormalTok{ j}\OperatorTok{,}\NormalTok{ x}\OperatorTok{,}\NormalTok{ y}\OperatorTok{,}\NormalTok{ k}\OperatorTok{);} \CommentTok{/*** ERRADO ***/}
\end{Highlighting}
\end{Shaded}

--

Os compiladores de C não são obrigados a verificar que o descritor
\texttt{\%} usado é o apropriado para o tipo da expressão/variável.

\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{int}\NormalTok{ natural}\OperatorTok{;}
\DataTypeTok{float}\NormalTok{ real}\OperatorTok{;}
\NormalTok{printf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%f}\StringTok{ }\SpecialCharTok{\%d\textbackslash{}n}\StringTok{"}\OperatorTok{,}\NormalTok{ natural}\OperatorTok{,}\NormalTok{ realj}\OperatorTok{);} \CommentTok{/*** ERRADO ***/}
\end{Highlighting}
\end{Shaded}
\end{block}
\end{frame}

\begin{frame}[fragile]
\begin{block}{\texttt{printf}}
\protect\hypertarget{printf}{}
Os descritores \texttt{\%d}, \texttt{\%f}, \ldots{} também podem ser
denominados por \textbf{especificações de conversão}.

--
\end{block}

\begin{block}{Número de digitos}
\protect\hypertarget{nuxfamero-de-digitos}{}
\texttt{\%d} escreve o número inteiro que recebe, mas podemos definir um
número de ditigos mínimo.

\texttt{c\ {[}{]}\ //\ output\ no\ comentário\ após\ as\ linhas\ //\ •\ significa\ um\ espaço\ printf("\%d\textbackslash{}n",\ 42);\ \ \ \ //\ -\textgreater{}\ 42\ printf("\%5d\textbackslash{}n",\ 42);\ \ \ //\ -\textgreater{}\ •••42\ (3\ espaços\ antes\ do\ 2)\ printf("\%05d\textbackslash{}n",\ 422);\ //\ -\textgreater{}\ 00042\ (3\ zeros\ antes\ do\ 2)}

\begin{itemize}
\tightlist
\item
  a linha 2 especifica que o que é escrito deve ter pelo menos 5
  caracteres, se não tiver, são adicionados espaços antes do número até
  os perfazer;
\item
  a linha 3 indica o mesmo, para são usados 0s para preencher.
\end{itemize}

--
\end{block}

\begin{block}{casas decimais}
\protect\hypertarget{casas-decimais}{}
Podemos fazer o mesmo com os números reais.

\texttt{c\ {[}{]}\ printf("\%f\textbackslash{}n",\ 3.14159);\ \ \ \ \ //\ -\textgreater{}\ 3.141590\ printf("\%.2f\textbackslash{}n",\ 3.14159);\ \ \ //\ -\textgreater{}\ 3.14\ (2\ casas\ decimais)\ printf("\%.f\textbackslash{}n",\ 3.14159);\ \ \ \ //\ -\textgreater{}\ 3\ (0\ casas\ decimais,\ arredonda)\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ //também\ podia\ ser\ \%.0f}

\texttt{c\ {[}{]}\ printf("\%5.2f\textbackslash{}n",\ 3.14159);\ \ //\ -\textgreater{}\ •3.14\ (2\ casas\ decimais,\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ //\ pelo\ menos\ 5\ characteres\ no\ total,\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ //\ adiciona\ 1\ espaço\ antes)\ printf("\%05.2f\textbackslash{}n",\ 3.14159);\ //\ -\textgreater{}\ 03.14\ (adiciona\ 0s)}

```c {[}{]} printf(``\%-5.2f\n'', 3.14159); // -\textgreater{} 3.14• (2
casas decimais, // pelo menos 5 characteres no total, // adiciona 1
espaço depois)

\begin{verbatim}
<!-- .element: class="fragment" -->

--

### regra geral

Temos a fórmula
<span style="color:Salmon">`%m.pX`</span> ou 
<span style="color:Salmon">`%-m.pX`</span>, onde
<span style="color:Salmon">`m`</span> e 
<span style="color:Salmon">`p`</span> são números naturais positivos, mas opcionais.
<span style="color:Salmon">`X`</span> é uma letra válida para conversão, e.g. `d` ou `f`.


<span style="color:Salmon">`m`</span>
 é o número de caracteres mínimo que devem ser escritos, sendo adicionados, à esquerda, espaços, ou zeros se designarmos
 <span style="color:Salmon">`0m`</span>.
<!-- .element: class="fragment" -->


<span style="color:Salmon">`p`</span>
é o número de casas decimais a usar.
<!-- .element: class="fragment" -->

Quando temos
<span style="color:Salmon">`-m`</span>, adicionamos os espaços à direita do número.
<!-- .element: class="fragment" -->

--

`p` nem sempre faz sentido, pois depende da letra `X` escolhida.

--

### tabela de especificações de conversão

| letras | descrição |
| ------ | --------- | 
| d      | inteiros, `p` não faz sentido, `m` é o número mínimo de caracteres a serem escritos |
| e      | reais em notação científica, `p` é o número de casas decimais
| f      | reais em "decimal fixo", sem expoente, `p` tem o mesmo significado |

--

### símbolos especiais

| Símbolo | descrição |
| --- | ---- |
| \n  | nova linha |
| \t | tabulação |
| `\\` | permite inserir um \ |
| \a | causa um alerta sonoro na maior parte dos computadores |

---

## ``scanf``

### Como funciona?

--

Na sua essência, o `scanf` faz correspondência de padrões.
Tenta fazer a correspondência entre grupos de *input* com especificações de conversão.

Para cada especificação de conversão, o `scanf` tenta encontrar um item do tipo apropriado no *input* recebido, parando quando recebe um caracter incompatível com esse tipo.
<!-- .element: class="fragment" -->

Se algum item não for lido com sucesso, o ``scanf`` retorna sem tentar fazer a correspondência entre as restantes especificações de conversão com o resto do *input*.
<!-- .element: class="fragment" -->

--

Ao procurar pelo início de um número, todos os espaços em branco são ignorados, e.g. espaços, novas linhas, tabulações, ...

--

```c
int i, j;
float x, y;
scanf("%d%d%f%f", &i, &j, &x, &y);
printf("i=%d, j=%d\nx=%f, y=%f\n", i, j, x, y);
\end{verbatim}

Este programa irá ler os seguintes números de igual forma:

\texttt{bash\ {[}2{]}\ Introduza\ 2\ inteiros\ e\ 2\ reais:\ 1\ 2\ 3\ 4\ 5\ i=1,\ j=2\ x=3.000000,\ y=4.000000}

\texttt{bash\ {[}2-4{]}\ Introduza\ 2\ inteiros\ e\ 2\ reais:\ 3\ \ \ \ \ 4\ 5\ 6\ i=3,\ j=4\ x=5.000000,\ y=6.000000}

--

Porquê é que isto acontece?

O scanf lê todo o input como uma sequência de caracteres. Os espaços,
enters, tabulações, etc. são todos caracteres.

\begin{Shaded}
\begin{Highlighting}[]
\ExtensionTok{3}
    \ExtensionTok{4}
\ExtensionTok{5}\NormalTok{ 6}
\end{Highlighting}
\end{Shaded}

é equivalente a

\begin{Shaded}
\begin{Highlighting}[]
\ExtensionTok{3¤••••4¤5•6¤}
\end{Highlighting}
\end{Shaded}

onde \texttt{¤} é uma nova linha e \texttt{•} é um espaço.

--

O \texttt{scanf} pára de ler quando encontra um enter (nova linha) após
a correspondência da última especificação de conversão.

⚠️Importante⚠️ Contudo, o último enter não é consumido do \emph{input} e
por isso será o primeiro caracter a ser lido na próxima chamada do
\texttt{scanf}.

--

Regras de correspondência para inteiros \texttt{\%d}: - procura pelo
primeiro digito ou sinal de + ou - - lê digitos até encontrar o primeiro
caracter não digito

--

Regras de correspondência para reais \texttt{\%f\ \%e}: - procura pelo
sinal de + ou - (opcional) - lê uma série de digitos, que podem conter
\textbf{1} \texttt{.} a indicar que depois vêm casas decimais - um
expoente (opcional): consiste na letra e ou E seguida de um sinal e mais
digitos, e.g.~\texttt{1e-3} (=0.001), \texttt{1E3} (=10000).

--

Quando o scanf lê um caracter que não encaixa na especificação de
conversão que está a ser processada, é novamente colocado no input para
ser processado

--

Ler apenas N digitos

\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{int}\NormalTok{ d1}\OperatorTok{,}\NormalTok{ d2}\OperatorTok{;}
\NormalTok{printf}\OperatorTok{(}\StringTok{"Numero inteiro:"}\OperatorTok{);}
\NormalTok{scanf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%1d\%2d}\StringTok{"}\OperatorTok{,} \OperatorTok{\&}\NormalTok{d1}\OperatorTok{,} \OperatorTok{\&}\NormalTok{d2}\OperatorTok{);}  \CommentTok{// utilizador escreve 242}
\NormalTok{printf}\OperatorTok{(}\StringTok{"d1=}\SpecialCharTok{\%d\textbackslash{}n}\StringTok{"}\OperatorTok{,}\NormalTok{ d1}\OperatorTok{);} \CommentTok{// d1=2}
\NormalTok{printf}\OperatorTok{(}\StringTok{"d2=}\SpecialCharTok{\%d\textbackslash{}n}\StringTok{"}\OperatorTok{,}\NormalTok{ d2}\OperatorTok{);} \CommentTok{// d2=42}
\end{Highlighting}
\end{Shaded}

\texttt{\%Nd} permite ler \texttt{N} digitos inteiros.
\end{block}
\end{frame}

\begin{frame}{Exercício}
\protect\hypertarget{exercuxedcio}{}
Soma de frações.
\end{frame}



\end{document}
