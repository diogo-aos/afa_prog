% Options for packages loaded elsewhere
\PassOptionsToPackage{unicode}{hyperref}
\PassOptionsToPackage{hyphens}{url}
%
\documentclass[
  ignorenonframetext,
]{beamer}
\usepackage{pgfpages}
\setbeamertemplate{caption}[numbered]
\setbeamertemplate{caption label separator}{: }
\setbeamercolor{caption name}{fg=normal text.fg}
\beamertemplatenavigationsymbolsempty
% Prevent slide breaks in the middle of a paragraph
\widowpenalties 1 10000
\raggedbottom
\setbeamertemplate{part page}{
  \centering
  \begin{beamercolorbox}[sep=16pt,center]{part title}
    \usebeamerfont{part title}\insertpart\par
  \end{beamercolorbox}
}
\setbeamertemplate{section page}{
  \centering
  \begin{beamercolorbox}[sep=12pt,center]{part title}
    \usebeamerfont{section title}\insertsection\par
  \end{beamercolorbox}
}
\setbeamertemplate{subsection page}{
  \centering
  \begin{beamercolorbox}[sep=8pt,center]{part title}
    \usebeamerfont{subsection title}\insertsubsection\par
  \end{beamercolorbox}
}
\AtBeginPart{
  \frame{\partpage}
}
\AtBeginSection{
  \ifbibliography
  \else
    \frame{\sectionpage}
  \fi
}
\AtBeginSubsection{
  \frame{\subsectionpage}
}

\usepackage{amsmath,amssymb}
\usepackage{iftex}
\ifPDFTeX
  \usepackage[T1]{fontenc}
  \usepackage[utf8]{inputenc}
  \usepackage{textcomp} % provide euro and other symbols
\else % if luatex or xetex
  \usepackage{unicode-math}
  \defaultfontfeatures{Scale=MatchLowercase}
  \defaultfontfeatures[\rmfamily]{Ligatures=TeX,Scale=1}
\fi
\usepackage{lmodern}
\ifPDFTeX\else  
    % xetex/luatex font selection
\fi
% Use upquote if available, for straight quotes in verbatim environments
\IfFileExists{upquote.sty}{\usepackage{upquote}}{}
\IfFileExists{microtype.sty}{% use microtype if available
  \usepackage[]{microtype}
  \UseMicrotypeSet[protrusion]{basicmath} % disable protrusion for tt fonts
}{}
\makeatletter
\@ifundefined{KOMAClassName}{% if non-KOMA class
  \IfFileExists{parskip.sty}{%
    \usepackage{parskip}
  }{% else
    \setlength{\parindent}{0pt}
    \setlength{\parskip}{6pt plus 2pt minus 1pt}}
}{% if KOMA class
  \KOMAoptions{parskip=half}}
\makeatother
\usepackage{xcolor}
\newif\ifbibliography
\setlength{\emergencystretch}{3em} % prevent overfull lines
\setcounter{secnumdepth}{-\maxdimen} % remove section numbering

\usepackage{color}
\usepackage{fancyvrb}
\newcommand{\VerbBar}{|}
\newcommand{\VERB}{\Verb[commandchars=\\\{\}]}
\DefineVerbatimEnvironment{Highlighting}{Verbatim}{commandchars=\\\{\}}
% Add ',fontsize=\small' for more characters per line
\usepackage{framed}
\definecolor{shadecolor}{RGB}{241,243,245}
\newenvironment{Shaded}{\begin{snugshade}}{\end{snugshade}}
\newcommand{\AlertTok}[1]{\textcolor[rgb]{0.68,0.00,0.00}{#1}}
\newcommand{\AnnotationTok}[1]{\textcolor[rgb]{0.37,0.37,0.37}{#1}}
\newcommand{\AttributeTok}[1]{\textcolor[rgb]{0.40,0.45,0.13}{#1}}
\newcommand{\BaseNTok}[1]{\textcolor[rgb]{0.68,0.00,0.00}{#1}}
\newcommand{\BuiltInTok}[1]{\textcolor[rgb]{0.00,0.23,0.31}{#1}}
\newcommand{\CharTok}[1]{\textcolor[rgb]{0.13,0.47,0.30}{#1}}
\newcommand{\CommentTok}[1]{\textcolor[rgb]{0.37,0.37,0.37}{#1}}
\newcommand{\CommentVarTok}[1]{\textcolor[rgb]{0.37,0.37,0.37}{\textit{#1}}}
\newcommand{\ConstantTok}[1]{\textcolor[rgb]{0.56,0.35,0.01}{#1}}
\newcommand{\ControlFlowTok}[1]{\textcolor[rgb]{0.00,0.23,0.31}{#1}}
\newcommand{\DataTypeTok}[1]{\textcolor[rgb]{0.68,0.00,0.00}{#1}}
\newcommand{\DecValTok}[1]{\textcolor[rgb]{0.68,0.00,0.00}{#1}}
\newcommand{\DocumentationTok}[1]{\textcolor[rgb]{0.37,0.37,0.37}{\textit{#1}}}
\newcommand{\ErrorTok}[1]{\textcolor[rgb]{0.68,0.00,0.00}{#1}}
\newcommand{\ExtensionTok}[1]{\textcolor[rgb]{0.00,0.23,0.31}{#1}}
\newcommand{\FloatTok}[1]{\textcolor[rgb]{0.68,0.00,0.00}{#1}}
\newcommand{\FunctionTok}[1]{\textcolor[rgb]{0.28,0.35,0.67}{#1}}
\newcommand{\ImportTok}[1]{\textcolor[rgb]{0.00,0.46,0.62}{#1}}
\newcommand{\InformationTok}[1]{\textcolor[rgb]{0.37,0.37,0.37}{#1}}
\newcommand{\KeywordTok}[1]{\textcolor[rgb]{0.00,0.23,0.31}{#1}}
\newcommand{\NormalTok}[1]{\textcolor[rgb]{0.00,0.23,0.31}{#1}}
\newcommand{\OperatorTok}[1]{\textcolor[rgb]{0.37,0.37,0.37}{#1}}
\newcommand{\OtherTok}[1]{\textcolor[rgb]{0.00,0.23,0.31}{#1}}
\newcommand{\PreprocessorTok}[1]{\textcolor[rgb]{0.68,0.00,0.00}{#1}}
\newcommand{\RegionMarkerTok}[1]{\textcolor[rgb]{0.00,0.23,0.31}{#1}}
\newcommand{\SpecialCharTok}[1]{\textcolor[rgb]{0.37,0.37,0.37}{#1}}
\newcommand{\SpecialStringTok}[1]{\textcolor[rgb]{0.13,0.47,0.30}{#1}}
\newcommand{\StringTok}[1]{\textcolor[rgb]{0.13,0.47,0.30}{#1}}
\newcommand{\VariableTok}[1]{\textcolor[rgb]{0.07,0.07,0.07}{#1}}
\newcommand{\VerbatimStringTok}[1]{\textcolor[rgb]{0.13,0.47,0.30}{#1}}
\newcommand{\WarningTok}[1]{\textcolor[rgb]{0.37,0.37,0.37}{\textit{#1}}}

\providecommand{\tightlist}{%
  \setlength{\itemsep}{0pt}\setlength{\parskip}{0pt}}\usepackage{longtable,booktabs,array}
\usepackage{calc} % for calculating minipage widths
\usepackage{caption}
% Make caption package work with longtable
\makeatletter
\def\fnum@table{\tablename~\thetable}
\makeatother
\usepackage{graphicx}
\makeatletter
\def\maxwidth{\ifdim\Gin@nat@width>\linewidth\linewidth\else\Gin@nat@width\fi}
\def\maxheight{\ifdim\Gin@nat@height>\textheight\textheight\else\Gin@nat@height\fi}
\makeatother
% Scale images if necessary, so that they will not overflow the page
% margins by default, and it is still possible to overwrite the defaults
% using explicit options in \includegraphics[width, height, ...]{}
\setkeys{Gin}{width=\maxwidth,height=\maxheight,keepaspectratio}
% Set default figure placement to htbp
\makeatletter
\def\fps@figure{htbp}
\makeatother

\makeatletter
\@ifpackageloaded{tcolorbox}{}{\usepackage[skins,breakable]{tcolorbox}}
\@ifpackageloaded{fontawesome5}{}{\usepackage{fontawesome5}}
\definecolor{quarto-callout-color}{HTML}{909090}
\definecolor{quarto-callout-note-color}{HTML}{0758E5}
\definecolor{quarto-callout-important-color}{HTML}{CC1914}
\definecolor{quarto-callout-warning-color}{HTML}{EB9113}
\definecolor{quarto-callout-tip-color}{HTML}{00A047}
\definecolor{quarto-callout-caution-color}{HTML}{FC5300}
\definecolor{quarto-callout-color-frame}{HTML}{acacac}
\definecolor{quarto-callout-note-color-frame}{HTML}{4582ec}
\definecolor{quarto-callout-important-color-frame}{HTML}{d9534f}
\definecolor{quarto-callout-warning-color-frame}{HTML}{f0ad4e}
\definecolor{quarto-callout-tip-color-frame}{HTML}{02b875}
\definecolor{quarto-callout-caution-color-frame}{HTML}{fd7e14}
\makeatother
\makeatletter
\makeatother
\makeatletter
\makeatother
\makeatletter
\@ifpackageloaded{caption}{}{\usepackage{caption}}
\AtBeginDocument{%
\ifdefined\contentsname
  \renewcommand*\contentsname{Table of contents}
\else
  \newcommand\contentsname{Table of contents}
\fi
\ifdefined\listfigurename
  \renewcommand*\listfigurename{List of Figures}
\else
  \newcommand\listfigurename{List of Figures}
\fi
\ifdefined\listtablename
  \renewcommand*\listtablename{List of Tables}
\else
  \newcommand\listtablename{List of Tables}
\fi
\ifdefined\figurename
  \renewcommand*\figurename{Figure}
\else
  \newcommand\figurename{Figure}
\fi
\ifdefined\tablename
  \renewcommand*\tablename{Table}
\else
  \newcommand\tablename{Table}
\fi
}
\@ifpackageloaded{float}{}{\usepackage{float}}
\floatstyle{ruled}
\@ifundefined{c@chapter}{\newfloat{codelisting}{h}{lop}}{\newfloat{codelisting}{h}{lop}[chapter]}
\floatname{codelisting}{Listing}
\newcommand*\listoflistings{\listof{codelisting}{List of Listings}}
\makeatother
\makeatletter
\@ifpackageloaded{caption}{}{\usepackage{caption}}
\@ifpackageloaded{subcaption}{}{\usepackage{subcaption}}
\makeatother
\makeatletter
\@ifpackageloaded{tcolorbox}{}{\usepackage[skins,breakable]{tcolorbox}}
\makeatother
\makeatletter
\@ifundefined{shadecolor}{\definecolor{shadecolor}{rgb}{.97, .97, .97}}
\makeatother
\makeatletter
\makeatother
\makeatletter
\makeatother
\ifLuaTeX
  \usepackage{selnolig}  % disable illegal ligatures
\fi
\IfFileExists{bookmark.sty}{\usepackage{bookmark}}{\usepackage{hyperref}}
\IfFileExists{xurl.sty}{\usepackage{xurl}}{} % add URL line breaks if available
\urlstyle{same} % disable monospaced font for URLs
\hypersetup{
  hidelinks,
  pdfcreator={LaTeX via pandoc}}

\author{}
\date{}

\begin{document}
\ifdefined\Shaded\renewenvironment{Shaded}{\begin{tcolorbox}[enhanced, interior hidden, borderline west={3pt}{0pt}{shadecolor}, breakable, frame hidden, boxrule=0pt, sharp corners]}{\end{tcolorbox}}\fi

\renewcommand*\contentsname{Table of contents}
\begin{frame}[allowframebreaks]
  \frametitle{Table of contents}
  \tableofcontents[hideallsubsections]
\end{frame}
\begin{frame}{Slides}
\protect\hypertarget{slides}{}
\end{frame}

\begin{frame}{Leitura e escrita formatada}
\protect\hypertarget{leitura-e-escrita-formatada}{}
\begin{block}{Diogo Silva}
\protect\hypertarget{diogo-silva}{}
\begin{block}{CAP / ENGEL}
\protect\hypertarget{cap-engel}{}
dasilva@academiafa.edu.pt
\end{block}
\end{block}
\end{frame}

\begin{frame}[fragile]
\begin{block}{I/O formatado}
\protect\hypertarget{io-formatado}{}
O \texttt{printf} e \texttt{scanf} são 2 das funções mais usadas quando
programamos em C.

Ambas as funções permitem escrever/ler um número arbitrário de valores:
\end{block}
\end{frame}

\begin{frame}[fragile]
\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{printf}\OperatorTok{(}\StringTok{"string"}\OperatorTok{,}\NormalTok{ expr1}\OperatorTok{,} \OperatorTok{...,}\NormalTok{ exprN}\OperatorTok{);}
\NormalTok{scanf}\OperatorTok{(}\StringTok{"string"}\OperatorTok{,} \OperatorTok{\&}\NormalTok{var1}\OperatorTok{,} \OperatorTok{...,} \OperatorTok{\&}\NormalTok{varN}\OperatorTok{);}
\end{Highlighting}
\end{Shaded}

\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{int}\NormalTok{ altura}\OperatorTok{,}\NormalTok{ idade}\OperatorTok{;}
\DataTypeTok{float}\NormalTok{ massa}\OperatorTok{,}\NormalTok{ imc}\OperatorTok{;}
\NormalTok{printf}\OperatorTok{(}\StringTok{"Insira a idade e massa separadas por um espaco:"}\OperatorTok{);}
\NormalTok{scanf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%d}\StringTok{ }\SpecialCharTok{\%f}\StringTok{"}\OperatorTok{,} \OperatorTok{\&}\NormalTok{altura}\OperatorTok{,} \OperatorTok{\&}\NormalTok{massa}\OperatorTok{);}
\NormalTok{printf}\OperatorTok{(}\StringTok{"altura: }\SpecialCharTok{\%d\textbackslash{}n}\StringTok{massa:}\SpecialCharTok{\%f\textbackslash{}n}\StringTok{"}\OperatorTok{,}\NormalTok{ altura}\OperatorTok{,}\NormalTok{ massa}\OperatorTok{);}
\end{Highlighting}
\end{Shaded}
\end{frame}

\begin{frame}[fragile]
\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{scanf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%d}\StringTok{ }\SpecialCharTok{\%f}\StringTok{"}\OperatorTok{,} \OperatorTok{\&}\NormalTok{altura}\OperatorTok{,} \OperatorTok{\&}\NormalTok{massa}\OperatorTok{);}
\NormalTok{printf}\OperatorTok{(}\StringTok{"altura: }\SpecialCharTok{\%d\textbackslash{}n}\StringTok{massa:}\SpecialCharTok{\%f\textbackslash{}n}\StringTok{"}\OperatorTok{,}\NormalTok{ altura}\OperatorTok{,}\NormalTok{ massa}\OperatorTok{);}
\end{Highlighting}
\end{Shaded}

Quando usamos múltiplos descritores nestas funções, a correspondência
com as variáveis/expressões é feita por ordem sequencial:

\begin{itemize}
\tightlist
\item
  linha 1: o primeiro \texttt{\%d} corresponde à variável
  \texttt{altura}, \texttt{\%f} corresponde à \texttt{massa}
\item
  linha 2: idem
\end{itemize}
\end{frame}

\begin{frame}[fragile]
Os compiladores de C não são obrigados a verificar que o número de
descritores é coerente com o número de valores fornecidos.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{printf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%d}\StringTok{ }\SpecialCharTok{\%d}\StringTok{ }\SpecialCharTok{\%d\textbackslash{}n}\StringTok{"}\OperatorTok{,}\NormalTok{ i}\OperatorTok{);} \CommentTok{/*** ERRADO ***/}
\NormalTok{printf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%d\textbackslash{}n}\StringTok{"}\OperatorTok{,}\NormalTok{ i}\OperatorTok{,}\NormalTok{ j}\OperatorTok{,}\NormalTok{ x}\OperatorTok{,}\NormalTok{ y}\OperatorTok{,}\NormalTok{ k}\OperatorTok{);} \CommentTok{/*** ERRADO ***/}
\end{Highlighting}
\end{Shaded}
\end{frame}

\begin{frame}[fragile]
Os compiladores de C não são obrigados a verificar que o descritor
\texttt{\%} usado é o apropriado para o tipo da expressão/variável.

\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{int}\NormalTok{ natural}\OperatorTok{;}
\DataTypeTok{float}\NormalTok{ real}\OperatorTok{;}
\NormalTok{printf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%f}\StringTok{ }\SpecialCharTok{\%d\textbackslash{}n}\StringTok{"}\OperatorTok{,}\NormalTok{ natural}\OperatorTok{,}\NormalTok{ realj}\OperatorTok{);} \CommentTok{/*** ERRADO ***/}
\end{Highlighting}
\end{Shaded}
\end{frame}

\begin{frame}[fragile]
\begin{block}{\texttt{printf}}
\protect\hypertarget{printf}{}
Os descritores \texttt{\%d}, \texttt{\%f}, \ldots{} também podem ser
denominados por \textbf{especificações de conversão}.
\end{block}
\end{frame}

\begin{frame}[fragile]
\begin{block}{Número de digitos}
\protect\hypertarget{nuxfamero-de-digitos}{}
\texttt{\%d} escreve o número inteiro que recebe, mas podemos definir um
número de ditigos mínimo.

\begin{Shaded}
\begin{Highlighting}[]
\CommentTok{// output no comentário após as linhas}
\CommentTok{// • significa um espaço}
\NormalTok{printf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%d\textbackslash{}n}\StringTok{"}\OperatorTok{,} \DecValTok{42}\OperatorTok{);}    \CommentTok{// {-}\textgreater{} 42}
\NormalTok{printf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%5d\textbackslash{}n}\StringTok{"}\OperatorTok{,} \DecValTok{42}\OperatorTok{);}   \CommentTok{// {-}\textgreater{} •••42 (3 espaços antes do 2)}
\NormalTok{printf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%05d\textbackslash{}n}\StringTok{"}\OperatorTok{,} \DecValTok{422}\OperatorTok{);} \CommentTok{// {-}\textgreater{} 00042 (3 zeros antes do 2)}
\end{Highlighting}
\end{Shaded}
\end{block}
\end{frame}

\begin{frame}[fragile]
\begin{Shaded}
\begin{Highlighting}[numbers=left,,]
\CommentTok{// output no comentário após as linhas}
\CommentTok{// • significa um espaço}
\NormalTok{printf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%d\textbackslash{}n}\StringTok{"}\OperatorTok{,} \DecValTok{42}\OperatorTok{);}    \CommentTok{// {-}\textgreater{} 42}
\NormalTok{printf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%5d\textbackslash{}n}\StringTok{"}\OperatorTok{,} \DecValTok{42}\OperatorTok{);}   \CommentTok{// {-}\textgreater{} •••42 (3 espaços antes do 2)}
\NormalTok{printf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%05d\textbackslash{}n}\StringTok{"}\OperatorTok{,} \DecValTok{422}\OperatorTok{);} \CommentTok{// {-}\textgreater{} 00042 (3 zeros antes do 2)}
\end{Highlighting}
\end{Shaded}

Especifica que o que é escrito deve ter pelo menos 5 caracteres, se não
tiver, são adicionados espaços antes do número até os perfazer;
\end{frame}

\begin{frame}[fragile]
\begin{Shaded}
\begin{Highlighting}[numbers=left,,]
\CommentTok{// output no comentário após as linhas}
\CommentTok{// • significa um espaço}
\NormalTok{printf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%d\textbackslash{}n}\StringTok{"}\OperatorTok{,} \DecValTok{42}\OperatorTok{);}    \CommentTok{// {-}\textgreater{} 42}
\NormalTok{printf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%5d\textbackslash{}n}\StringTok{"}\OperatorTok{,} \DecValTok{42}\OperatorTok{);}   \CommentTok{// {-}\textgreater{} •••42 (3 espaços antes do 4)}
\NormalTok{printf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%05d\textbackslash{}n}\StringTok{"}\OperatorTok{,} \DecValTok{422}\OperatorTok{);} \CommentTok{// {-}\textgreater{} 00042 (3 zeros antes do 4)}
\end{Highlighting}
\end{Shaded}

Indica o mesmo, mas são usados 0s para preencher.
\end{frame}

\begin{frame}[fragile]
\begin{block}{Casas decimais}
\protect\hypertarget{casas-decimais}{}
Podemos fazer o mesmo com os números reais.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{printf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%f\textbackslash{}n}\StringTok{"}\OperatorTok{,} \FloatTok{3.14159}\OperatorTok{);}     \CommentTok{// {-}\textgreater{} 3.141590}
\NormalTok{printf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%.2f\textbackslash{}n}\StringTok{"}\OperatorTok{,} \FloatTok{3.14159}\OperatorTok{);}   \CommentTok{// {-}\textgreater{} 3.14 (2 casas decimais)}
\NormalTok{printf}\OperatorTok{(}\StringTok{"\%.f}\SpecialCharTok{\textbackslash{}n}\StringTok{"}\OperatorTok{,} \FloatTok{3.14159}\OperatorTok{);}    \CommentTok{// {-}\textgreater{} 3 (0 casas decimais, arredonda)}
                             \CommentTok{//também podia ser \%.0f}
\end{Highlighting}
\end{Shaded}
\end{block}
\end{frame}

\begin{frame}[fragile]
\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{printf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%5.2f\textbackslash{}n}\StringTok{"}\OperatorTok{,} \FloatTok{3.14159}\OperatorTok{);}  \CommentTok{// {-}\textgreater{} •3.14 (2 casas decimais,}
                             \CommentTok{// pelo menos 5 characteres no total,}
                             \CommentTok{// adiciona 1 espaço antes)}
\NormalTok{printf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%05.2f\textbackslash{}n}\StringTok{"}\OperatorTok{,} \FloatTok{3.14159}\OperatorTok{);} \CommentTok{// {-}\textgreater{} 03.14 (adiciona 0s)}
\end{Highlighting}
\end{Shaded}
\end{frame}

\begin{frame}[fragile]
\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{printf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%{-}5.2f\textbackslash{}n}\StringTok{"}\OperatorTok{,} \FloatTok{3.14159}\OperatorTok{);}  \CommentTok{// {-}\textgreater{} 3.14• (2 casas decimais,}
                             \CommentTok{// pelo menos 5 characteres no total,}
                             \CommentTok{// adiciona 1 espaço depois)}
\end{Highlighting}
\end{Shaded}
\end{frame}

\begin{frame}[fragile]
\begin{block}{regra geral}
\protect\hypertarget{regra-geral}{}
Temos a fórmula {\texttt{\%m.pX}} ou {\texttt{\%-m.pX}}, onde
{\texttt{m}} e {\texttt{p}} são números naturais positivos, mas
opcionais. {\texttt{X}} é uma letra válida para conversão,
e.g.~\texttt{d} ou \texttt{f}.

{\texttt{m}} é o número de caracteres mínimo que devem ser escritos,
sendo adicionados, à esquerda, espaços, ou zeros se designarmos
{\texttt{0m}}.

{\texttt{p}} é o número de casas decimais a usar.

Quando temos {\texttt{-m}}, adicionamos os espaços à direita do número.
\end{block}
\end{frame}

\begin{frame}[fragile]
\begin{block}{tabela de especificações de conversão}
\protect\hypertarget{tabela-de-especificauxe7uxf5es-de-conversuxe3o}{}
\begin{longtable}[]{@{}
  >{\raggedright\arraybackslash}p{(\columnwidth - 2\tabcolsep) * \real{0.4000}}
  >{\raggedright\arraybackslash}p{(\columnwidth - 2\tabcolsep) * \real{0.6000}}@{}}
\toprule\noalign{}
\begin{minipage}[b]{\linewidth}\raggedright
letras
\end{minipage} & \begin{minipage}[b]{\linewidth}\raggedright
descrição
\end{minipage} \\
\midrule\noalign{}
\endhead
d & inteiros, \texttt{p} não faz sentido, \texttt{m} é o número mínimo
de caracteres a serem escritos \\
e & reais em notação científica, \texttt{p} é o número de casas
decimais \\
f & reais em ``decimal fixo'', sem expoente, \texttt{p} tem o mesmo
significado \\
\bottomrule\noalign{}
\end{longtable}
\end{block}
\end{frame}

\begin{frame}[fragile]
\begin{block}{símbolos especiais}
\protect\hypertarget{suxedmbolos-especiais}{}
\begin{longtable}[]{@{}ll@{}}
\toprule\noalign{}
Símbolo & descrição \\
\midrule\noalign{}
\endhead
\texttt{\textbackslash{}n} & nova linha \\
\texttt{\textbackslash{}t} & tabulação \\
\texttt{\textbackslash{}\textbackslash{}} & permite inserir um
\textbackslash{} \\
\texttt{\textbackslash{}a} & causa um alerta sonoro na maior parte dos
computadores \\
\bottomrule\noalign{}
\end{longtable}
\end{block}
\end{frame}

\begin{frame}{\texttt{scanf}}
\protect\hypertarget{scanf}{}
\end{frame}

\begin{frame}[fragile]
\begin{block}{Como funciona?}
\protect\hypertarget{como-funciona}{}
Na sua essência, o \texttt{scanf} faz correspondência de padrões.

Tenta fazer a correspondência entre grupos de \emph{input} com
especificações de conversão.
\end{block}
\end{frame}

\begin{frame}[fragile]
Para cada especificação de conversão, o \texttt{scanf} tenta encontrar
um item do tipo apropriado no \emph{input} recebido, parando quando
recebe um caracter incompatível com esse tipo.

Se algum item não for lido com sucesso, o \texttt{scanf} retorna sem
tentar fazer a correspondência entre as restantes especificações de
conversão com o resto do \emph{input}.
\end{frame}

\begin{frame}
Ao procurar pelo início de um número, todos os espaços em branco são
ignorados, e.g.~espaços, novas linhas, tabulações, \ldots{}
\end{frame}

\begin{frame}[fragile]
\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{int}\NormalTok{ i}\OperatorTok{,}\NormalTok{ j}\OperatorTok{;}
\DataTypeTok{float}\NormalTok{ x}\OperatorTok{,}\NormalTok{ y}\OperatorTok{;}
\NormalTok{scanf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%d\%d\%f\%f}\StringTok{"}\OperatorTok{,} \OperatorTok{\&}\NormalTok{i}\OperatorTok{,} \OperatorTok{\&}\NormalTok{j}\OperatorTok{,} \OperatorTok{\&}\NormalTok{x}\OperatorTok{,} \OperatorTok{\&}\NormalTok{y}\OperatorTok{);}
\NormalTok{printf}\OperatorTok{(}\StringTok{"i=}\SpecialCharTok{\%d}\StringTok{, j=}\SpecialCharTok{\%d\textbackslash{}n}\StringTok{x=}\SpecialCharTok{\%f}\StringTok{, y=}\SpecialCharTok{\%f\textbackslash{}n}\StringTok{"}\OperatorTok{,}\NormalTok{ i}\OperatorTok{,}\NormalTok{ j}\OperatorTok{,}\NormalTok{ x}\OperatorTok{,}\NormalTok{ y}\OperatorTok{);}
\end{Highlighting}
\end{Shaded}

Este programa irá ler os seguintes números de igual forma:

\begin{Shaded}
\begin{Highlighting}[numbers=left,,]
\NormalTok{Introduza 2 inteiros e 2 reais:}
\NormalTok{1 2 3 4 5}
\NormalTok{i=1, j=2}
\NormalTok{x=3.000000, y=4.000000}
\end{Highlighting}
\end{Shaded}

\begin{Shaded}
\begin{Highlighting}[numbers=left,,]
\NormalTok{Introduza 2 inteiros e 2 reais:}
\NormalTok{3}
\NormalTok{    4}
\NormalTok{5 6}
\NormalTok{i=3, j=4}
\NormalTok{x=5.000000, y=6.000000}
\end{Highlighting}
\end{Shaded}
\end{frame}

\begin{frame}[fragile]
Porquê é que isto acontece?

O scanf lê todo o input como uma sequência de caracteres. Os espaços,
enters, tabulações, etc. são todos caracteres.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{3}
\NormalTok{    4}
\NormalTok{5 6}
\end{Highlighting}
\end{Shaded}

é equivalente a

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{3¤••••4¤5•6¤}
\end{Highlighting}
\end{Shaded}

onde \texttt{¤} é uma nova linha e \texttt{•} é um espaço.
\end{frame}

\begin{frame}[fragile]
O \texttt{scanf} pára de ler quando encontra um enter (nova linha) após
a correspondência da última especificação de conversão.

\begin{tcolorbox}[enhanced jigsaw, bottomrule=.15mm, breakable, opacitybacktitle=0.6, toprule=.15mm, colbacktitle=quarto-callout-caution-color!10!white, colback=white, title=\textcolor{quarto-callout-caution-color}{\faFire}\hspace{0.5em}{Atenção!}, leftrule=.75mm, arc=.35mm, left=2mm, toptitle=1mm, colframe=quarto-callout-caution-color-frame, titlerule=0mm, opacityback=0, rightrule=.15mm, bottomtitle=1mm, coltitle=black]

O último enter não é consumido do \emph{input} e por isso será o
primeiro caracter a ser lido na próxima chamada do \texttt{scanf}.

\end{tcolorbox}
\end{frame}

\begin{frame}[fragile]
Regras de correspondência para inteiros \texttt{\%d}:

\begin{itemize}
\tightlist
\item
  procura pelo primeiro digito ou sinal de + ou -
\item
  lê digitos até encontrar o primeiro caracter não digito
\end{itemize}
\end{frame}

\begin{frame}[fragile]
Regras de correspondência para reais \texttt{\%f\ \%e}:

\begin{itemize}
\tightlist
\item
  procura pelo sinal de + ou - (opcional)
\item
  lê uma série de digitos, que podem conter \textbf{1} \texttt{.} a
  indicar que depois vêm casas decimais
\item
  um expoente (opcional): consiste na letra e ou E seguida de um sinal e
  mais digitos, e.g.~\texttt{1e-3} (=0.001), \texttt{1E3} (=10000).
\end{itemize}
\end{frame}

\begin{frame}
Quando o scanf lê um caracter que não encaixa na especificação de
conversão que está a ser processada, é novamente colocado no input para
ser processado
\end{frame}

\begin{frame}[fragile]
Ler apenas N digitos

\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{int}\NormalTok{ d1}\OperatorTok{,}\NormalTok{ d2}\OperatorTok{;}
\NormalTok{printf}\OperatorTok{(}\StringTok{"Numero inteiro:"}\OperatorTok{);}
\NormalTok{scanf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%1d\%2d}\StringTok{"}\OperatorTok{,} \OperatorTok{\&}\NormalTok{d1}\OperatorTok{,} \OperatorTok{\&}\NormalTok{d2}\OperatorTok{);}  \CommentTok{// utilizador escreve 242}
\NormalTok{printf}\OperatorTok{(}\StringTok{"d1=}\SpecialCharTok{\%d\textbackslash{}n}\StringTok{"}\OperatorTok{,}\NormalTok{ d1}\OperatorTok{);} \CommentTok{// d1=2}
\NormalTok{printf}\OperatorTok{(}\StringTok{"d2=}\SpecialCharTok{\%d\textbackslash{}n}\StringTok{"}\OperatorTok{,}\NormalTok{ d2}\OperatorTok{);} \CommentTok{// d2=42}
\end{Highlighting}
\end{Shaded}

\texttt{\%Nd} permite ler \texttt{N} digitos inteiros.
\end{frame}

\begin{frame}{Exercício}
\protect\hypertarget{exercuxedcio}{}
Soma de frações.
\end{frame}



\end{document}
