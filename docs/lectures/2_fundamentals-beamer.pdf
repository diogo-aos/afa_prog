% Options for packages loaded elsewhere
\PassOptionsToPackage{unicode}{hyperref}
\PassOptionsToPackage{hyphens}{url}
%
\documentclass[
  ignorenonframetext,
]{beamer}
\usepackage{pgfpages}
\setbeamertemplate{caption}[numbered]
\setbeamertemplate{caption label separator}{: }
\setbeamercolor{caption name}{fg=normal text.fg}
\beamertemplatenavigationsymbolsempty
% Prevent slide breaks in the middle of a paragraph
\widowpenalties 1 10000
\raggedbottom
\setbeamertemplate{part page}{
  \centering
  \begin{beamercolorbox}[sep=16pt,center]{part title}
    \usebeamerfont{part title}\insertpart\par
  \end{beamercolorbox}
}
\setbeamertemplate{section page}{
  \centering
  \begin{beamercolorbox}[sep=12pt,center]{part title}
    \usebeamerfont{section title}\insertsection\par
  \end{beamercolorbox}
}
\setbeamertemplate{subsection page}{
  \centering
  \begin{beamercolorbox}[sep=8pt,center]{part title}
    \usebeamerfont{subsection title}\insertsubsection\par
  \end{beamercolorbox}
}
\AtBeginPart{
  \frame{\partpage}
}
\AtBeginSection{
  \ifbibliography
  \else
    \frame{\sectionpage}
  \fi
}
\AtBeginSubsection{
  \frame{\subsectionpage}
}

\usepackage{amsmath,amssymb}
\usepackage{iftex}
\ifPDFTeX
  \usepackage[T1]{fontenc}
  \usepackage[utf8]{inputenc}
  \usepackage{textcomp} % provide euro and other symbols
\else % if luatex or xetex
  \usepackage{unicode-math}
  \defaultfontfeatures{Scale=MatchLowercase}
  \defaultfontfeatures[\rmfamily]{Ligatures=TeX,Scale=1}
\fi
\usepackage{lmodern}
\ifPDFTeX\else  
    % xetex/luatex font selection
\fi
% Use upquote if available, for straight quotes in verbatim environments
\IfFileExists{upquote.sty}{\usepackage{upquote}}{}
\IfFileExists{microtype.sty}{% use microtype if available
  \usepackage[]{microtype}
  \UseMicrotypeSet[protrusion]{basicmath} % disable protrusion for tt fonts
}{}
\makeatletter
\@ifundefined{KOMAClassName}{% if non-KOMA class
  \IfFileExists{parskip.sty}{%
    \usepackage{parskip}
  }{% else
    \setlength{\parindent}{0pt}
    \setlength{\parskip}{6pt plus 2pt minus 1pt}}
}{% if KOMA class
  \KOMAoptions{parskip=half}}
\makeatother
\usepackage{xcolor}
\newif\ifbibliography
\setlength{\emergencystretch}{3em} % prevent overfull lines
\setcounter{secnumdepth}{-\maxdimen} % remove section numbering

\usepackage{color}
\usepackage{fancyvrb}
\newcommand{\VerbBar}{|}
\newcommand{\VERB}{\Verb[commandchars=\\\{\}]}
\DefineVerbatimEnvironment{Highlighting}{Verbatim}{commandchars=\\\{\}}
% Add ',fontsize=\small' for more characters per line
\usepackage{framed}
\definecolor{shadecolor}{RGB}{241,243,245}
\newenvironment{Shaded}{\begin{snugshade}}{\end{snugshade}}
\newcommand{\AlertTok}[1]{\textcolor[rgb]{0.68,0.00,0.00}{#1}}
\newcommand{\AnnotationTok}[1]{\textcolor[rgb]{0.37,0.37,0.37}{#1}}
\newcommand{\AttributeTok}[1]{\textcolor[rgb]{0.40,0.45,0.13}{#1}}
\newcommand{\BaseNTok}[1]{\textcolor[rgb]{0.68,0.00,0.00}{#1}}
\newcommand{\BuiltInTok}[1]{\textcolor[rgb]{0.00,0.23,0.31}{#1}}
\newcommand{\CharTok}[1]{\textcolor[rgb]{0.13,0.47,0.30}{#1}}
\newcommand{\CommentTok}[1]{\textcolor[rgb]{0.37,0.37,0.37}{#1}}
\newcommand{\CommentVarTok}[1]{\textcolor[rgb]{0.37,0.37,0.37}{\textit{#1}}}
\newcommand{\ConstantTok}[1]{\textcolor[rgb]{0.56,0.35,0.01}{#1}}
\newcommand{\ControlFlowTok}[1]{\textcolor[rgb]{0.00,0.23,0.31}{#1}}
\newcommand{\DataTypeTok}[1]{\textcolor[rgb]{0.68,0.00,0.00}{#1}}
\newcommand{\DecValTok}[1]{\textcolor[rgb]{0.68,0.00,0.00}{#1}}
\newcommand{\DocumentationTok}[1]{\textcolor[rgb]{0.37,0.37,0.37}{\textit{#1}}}
\newcommand{\ErrorTok}[1]{\textcolor[rgb]{0.68,0.00,0.00}{#1}}
\newcommand{\ExtensionTok}[1]{\textcolor[rgb]{0.00,0.23,0.31}{#1}}
\newcommand{\FloatTok}[1]{\textcolor[rgb]{0.68,0.00,0.00}{#1}}
\newcommand{\FunctionTok}[1]{\textcolor[rgb]{0.28,0.35,0.67}{#1}}
\newcommand{\ImportTok}[1]{\textcolor[rgb]{0.00,0.46,0.62}{#1}}
\newcommand{\InformationTok}[1]{\textcolor[rgb]{0.37,0.37,0.37}{#1}}
\newcommand{\KeywordTok}[1]{\textcolor[rgb]{0.00,0.23,0.31}{#1}}
\newcommand{\NormalTok}[1]{\textcolor[rgb]{0.00,0.23,0.31}{#1}}
\newcommand{\OperatorTok}[1]{\textcolor[rgb]{0.37,0.37,0.37}{#1}}
\newcommand{\OtherTok}[1]{\textcolor[rgb]{0.00,0.23,0.31}{#1}}
\newcommand{\PreprocessorTok}[1]{\textcolor[rgb]{0.68,0.00,0.00}{#1}}
\newcommand{\RegionMarkerTok}[1]{\textcolor[rgb]{0.00,0.23,0.31}{#1}}
\newcommand{\SpecialCharTok}[1]{\textcolor[rgb]{0.37,0.37,0.37}{#1}}
\newcommand{\SpecialStringTok}[1]{\textcolor[rgb]{0.13,0.47,0.30}{#1}}
\newcommand{\StringTok}[1]{\textcolor[rgb]{0.13,0.47,0.30}{#1}}
\newcommand{\VariableTok}[1]{\textcolor[rgb]{0.07,0.07,0.07}{#1}}
\newcommand{\VerbatimStringTok}[1]{\textcolor[rgb]{0.13,0.47,0.30}{#1}}
\newcommand{\WarningTok}[1]{\textcolor[rgb]{0.37,0.37,0.37}{\textit{#1}}}

\providecommand{\tightlist}{%
  \setlength{\itemsep}{0pt}\setlength{\parskip}{0pt}}\usepackage{longtable,booktabs,array}
\usepackage{calc} % for calculating minipage widths
\usepackage{caption}
% Make caption package work with longtable
\makeatletter
\def\fnum@table{\tablename~\thetable}
\makeatother
\usepackage{graphicx}
\makeatletter
\def\maxwidth{\ifdim\Gin@nat@width>\linewidth\linewidth\else\Gin@nat@width\fi}
\def\maxheight{\ifdim\Gin@nat@height>\textheight\textheight\else\Gin@nat@height\fi}
\makeatother
% Scale images if necessary, so that they will not overflow the page
% margins by default, and it is still possible to overwrite the defaults
% using explicit options in \includegraphics[width, height, ...]{}
\setkeys{Gin}{width=\maxwidth,height=\maxheight,keepaspectratio}
% Set default figure placement to htbp
\makeatletter
\def\fps@figure{htbp}
\makeatother

\makeatletter
\@ifpackageloaded{tcolorbox}{}{\usepackage[skins,breakable]{tcolorbox}}
\@ifpackageloaded{fontawesome5}{}{\usepackage{fontawesome5}}
\definecolor{quarto-callout-color}{HTML}{909090}
\definecolor{quarto-callout-note-color}{HTML}{0758E5}
\definecolor{quarto-callout-important-color}{HTML}{CC1914}
\definecolor{quarto-callout-warning-color}{HTML}{EB9113}
\definecolor{quarto-callout-tip-color}{HTML}{00A047}
\definecolor{quarto-callout-caution-color}{HTML}{FC5300}
\definecolor{quarto-callout-color-frame}{HTML}{acacac}
\definecolor{quarto-callout-note-color-frame}{HTML}{4582ec}
\definecolor{quarto-callout-important-color-frame}{HTML}{d9534f}
\definecolor{quarto-callout-warning-color-frame}{HTML}{f0ad4e}
\definecolor{quarto-callout-tip-color-frame}{HTML}{02b875}
\definecolor{quarto-callout-caution-color-frame}{HTML}{fd7e14}
\makeatother
\makeatletter
\makeatother
\makeatletter
\makeatother
\makeatletter
\@ifpackageloaded{caption}{}{\usepackage{caption}}
\AtBeginDocument{%
\ifdefined\contentsname
  \renewcommand*\contentsname{Table of contents}
\else
  \newcommand\contentsname{Table of contents}
\fi
\ifdefined\listfigurename
  \renewcommand*\listfigurename{List of Figures}
\else
  \newcommand\listfigurename{List of Figures}
\fi
\ifdefined\listtablename
  \renewcommand*\listtablename{List of Tables}
\else
  \newcommand\listtablename{List of Tables}
\fi
\ifdefined\figurename
  \renewcommand*\figurename{Figure}
\else
  \newcommand\figurename{Figure}
\fi
\ifdefined\tablename
  \renewcommand*\tablename{Table}
\else
  \newcommand\tablename{Table}
\fi
}
\@ifpackageloaded{float}{}{\usepackage{float}}
\floatstyle{ruled}
\@ifundefined{c@chapter}{\newfloat{codelisting}{h}{lop}}{\newfloat{codelisting}{h}{lop}[chapter]}
\floatname{codelisting}{Listing}
\newcommand*\listoflistings{\listof{codelisting}{List of Listings}}
\makeatother
\makeatletter
\@ifpackageloaded{caption}{}{\usepackage{caption}}
\@ifpackageloaded{subcaption}{}{\usepackage{subcaption}}
\makeatother
\makeatletter
\@ifpackageloaded{tcolorbox}{}{\usepackage[skins,breakable]{tcolorbox}}
\makeatother
\makeatletter
\@ifundefined{shadecolor}{\definecolor{shadecolor}{rgb}{.97, .97, .97}}
\makeatother
\makeatletter
\makeatother
\makeatletter
\makeatother
\ifLuaTeX
  \usepackage{selnolig}  % disable illegal ligatures
\fi
\IfFileExists{bookmark.sty}{\usepackage{bookmark}}{\usepackage{hyperref}}
\IfFileExists{xurl.sty}{\usepackage{xurl}}{} % add URL line breaks if available
\urlstyle{same} % disable monospaced font for URLs
\hypersetup{
  pdftitle={Fundamentos do C},
  pdfauthor={CAP Diogo Silva},
  hidelinks,
  pdfcreator={LaTeX via pandoc}}

\title{Fundamentos do C}
\author{CAP Diogo Silva}
\date{}
\institute{Academia da Força Aérea}
\logo{\includegraphics{afa.svg}}

\begin{document}
\frame{\titlepage}
\ifdefined\Shaded\renewenvironment{Shaded}{\begin{tcolorbox}[interior hidden, sharp corners, boxrule=0pt, borderline west={3pt}{0pt}{shadecolor}, frame hidden, enhanced, breakable]}{\end{tcolorbox}}\fi

\renewcommand*\contentsname{Table of contents}
\begin{frame}[allowframebreaks]
  \frametitle{Table of contents}
  \tableofcontents[hideallsubsections]
\end{frame}
\begin{frame}{Tópicos}
\protect\hypertarget{tuxf3picos}{}
\begin{itemize}
\tightlist
\item
  \protect\hyperlink{ux2f2_1_primeiro_programa}{O primeiro programa}
\item
  \protect\hyperlink{ux2f2_2_componentes_programa}{Componentes de um
  programa}
\item
  \protect\hyperlink{ux2f2_3_comentarios}{Comentários}
\item
  \protect\hyperlink{ux2f2_4_variaveis}{Variáveis}
\item
  \protect\hyperlink{ux2f2_5_scanf}{I/O Receber Valores}
\item
  \protect\hyperlink{ux2f2_6_constantes}{Constantes}
\item
  \protect\hyperlink{ux2f2_7_identificadores}{Identificadores}
\end{itemize}
\end{frame}

\begin{frame}[fragile]{O primeiro programa}
\protect\hypertarget{o-primeiro-programa}{}
\begin{Shaded}
\begin{Highlighting}[]
\PreprocessorTok{\#include }\ImportTok{\textless{}stdio.h\textgreater{}}

\DataTypeTok{int}\NormalTok{ main}\OperatorTok{()\{}
\NormalTok{    printf}\OperatorTok{(}\StringTok{"Hello world!"}\OperatorTok{);}
    \ControlFlowTok{return} \DecValTok{0}\OperatorTok{;}
\OperatorTok{\}}
\end{Highlighting}
\end{Shaded}

O que está a acontecer?

Este programa simples escreve no terminal a frase ``Hello world!'', sem
as ``.
\end{frame}

\begin{frame}[fragile]
\begin{Shaded}
\begin{Highlighting}[]
\PreprocessorTok{\#include }\ImportTok{\textless{}stdio.h\textgreater{}}

\DataTypeTok{int}\NormalTok{ main}\OperatorTok{()\{}
\NormalTok{    printf}\OperatorTok{(}\StringTok{"Hello world!"}\OperatorTok{);}
    \ControlFlowTok{return} \DecValTok{0}\OperatorTok{;}
\OperatorTok{\}}
\end{Highlighting}
\end{Shaded}

``Importa'' código externo ao nosso programa, permitindo chamar a função
printf, que não está aqui definida (linha 1).
\end{frame}

\begin{frame}[fragile]
\begin{Shaded}
\begin{Highlighting}[]
\PreprocessorTok{\#include }\ImportTok{\textless{}stdio.h\textgreater{}}

\DataTypeTok{int}\NormalTok{ main}\OperatorTok{()\{}
\NormalTok{    printf}\OperatorTok{(}\StringTok{"Hello world!"}\OperatorTok{);}
    \ControlFlowTok{return} \DecValTok{0}\OperatorTok{;}
\OperatorTok{\}}
\end{Highlighting}
\end{Shaded}

É a função principal do programa (linhas 3-6). Os programas em C começam
sempre nesta função. Todos os programas têm uma função \texttt{main}.
\end{frame}

\begin{frame}[fragile]
\begin{Shaded}
\begin{Highlighting}[]
\PreprocessorTok{\#include }\ImportTok{\textless{}stdio.h\textgreater{}}

\DataTypeTok{int}\NormalTok{ main}\OperatorTok{()\{}
\NormalTok{    printf}\OperatorTok{(}\StringTok{"Hello world!"}\OperatorTok{);}
    \ControlFlowTok{return} \DecValTok{0}\OperatorTok{;}
\OperatorTok{\}}
\end{Highlighting}
\end{Shaded}

É uma instrução (linha 4) que chama a função \texttt{printf} da
biblioteca \texttt{stdio.h} (que faz parte do próprio C), dando-lhe como
input o literal de \emph{string} \texttt{"Hello\ world!"}.

A função ``imprime'' no terminal o input recebido.

Todas as instruções no C acabam com \texttt{;}.
\end{frame}

\begin{frame}[fragile]
\begin{Shaded}
\begin{Highlighting}[]
\PreprocessorTok{\#include }\ImportTok{\textless{}stdio.h\textgreater{}}

\DataTypeTok{int}\NormalTok{ main}\OperatorTok{()\{}
\NormalTok{    printf}\OperatorTok{(}\StringTok{"Hello world!"}\OperatorTok{);}
    \ControlFlowTok{return} \DecValTok{0}\OperatorTok{;}
\OperatorTok{\}}
\end{Highlighting}
\end{Shaded}

Especifica o valor de retorno do nosso programa, neste caso 0 (linha 5).
\end{frame}

\begin{frame}
\begin{block}{Escrevi o código, e agora?}
\protect\hypertarget{escrevi-o-cuxf3digo-e-agora}{}
\end{block}
\end{frame}

\begin{frame}
\begin{itemize}
\tightlist
\item
  preprocessamento

  \begin{itemize}
  \tightlist
  \item
    obedece a comandos que começam com \# (diretivas)
  \item
    funciona um pouco como um editor de texto, onde se adicionam ou
    modificam partes do código
  \end{itemize}
\item
  compilação

  \begin{itemize}
  \tightlist
  \item
    transformar o código C numa linguagem que o computador perceba =
    linguagem máquina
  \end{itemize}
\item
  \emph{linking}

  \begin{itemize}
  \tightlist
  \item
    combina o output gerado pela compilação com outro código necessário
    à execução do programa (e.g.~stdio.h para usar o printf)
  \end{itemize}
\end{itemize}
\end{frame}

\begin{frame}
Quando damos indicação ao nosso IDE para compilar e correr o código,
estes 3 passos tipicamente acontecem de forma automática.
\end{frame}

\begin{frame}[fragile]{Componentes de um programa}
\protect\hypertarget{componentes-de-um-programa}{}
\begin{Shaded}
\begin{Highlighting}[]
\PreprocessorTok{\#}\ErrorTok{diretivas}

\DataTypeTok{int}\NormalTok{ main}\OperatorTok{()\{}
\NormalTok{    instruções}\OperatorTok{;}
\OperatorTok{\}}
\end{Highlighting}
\end{Shaded}
\end{frame}

\begin{frame}[fragile]
\begin{block}{A diretiva \emph{include}}
\protect\hypertarget{a-diretiva-include}{}
\begin{Shaded}
\begin{Highlighting}[]
\PreprocessorTok{\#include }\ImportTok{\textless{}stdio.h\textgreater{}}
\end{Highlighting}
\end{Shaded}

Esta diretiva indica que o conteúdo da biblioteca \texttt{stdio.h} deve
ser incluida no programa atual.
\end{block}
\end{frame}

\begin{frame}
\begin{block}{Funções}
\protect\hypertarget{funuxe7uxf5es}{}
Funções são procedimentos ou subrotinas que executam uma determinado
conjunto de instruções.

Cada função é uma determinada receita para um determinado comportamento
ou funcionalidade.

Isto permite que o mesmo comportamento seja executado diversas vezes num
programa sem o ter que implementar múltiplas vezes.
\end{block}
\end{frame}

\begin{frame}[fragile]
\begin{block}{Instruções}
\protect\hypertarget{instruuxe7uxf5es}{}
Uma instrução é um comando que é executado quando o programa corre, e.g.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{printf}\OperatorTok{(}\StringTok{"Hello world!"}\OperatorTok{);}
\end{Highlighting}
\end{Shaded}
\end{block}
\end{frame}

\begin{frame}[fragile]
\begin{block}{I/O \texttt{printf}}
\protect\hypertarget{io-printf}{}
A capacidade de um programa comunicar com o mundo exterior é fundamental
para que seja útil.

No nosso primeiro programa, essa comunicação foi feita com a função
\texttt{printf} e o output foi apresentado num terminal.
\end{block}
\end{frame}

\begin{frame}
Anteriormente foi referido que a função recebeu um \emph{literal de
string}, uma série sequencial de caracteres entre ``\,``.

As ``\,'' não são incluidas no que aparece no terminal. Se quisermos
incluir '' no nosso output, é necessário escrever ".
\end{frame}

\begin{frame}[fragile]
O \texttt{printf} não inclui automaticamente o fim de linha.

Para garantir que o \texttt{printf} seguinte não apresenta o seu
conteúdo na mesma linha do anterior, é necessário adicionar
\texttt{\textbackslash{}n}.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{printf}\OperatorTok{(}\StringTok{"Hello world!}\SpecialCharTok{\textbackslash{}n}\StringTok{"}\OperatorTok{);}
\NormalTok{printf}\OperatorTok{(}\StringTok{"Good morning, Vietnam!"}\OperatorTok{);}
\end{Highlighting}
\end{Shaded}
\end{frame}

\begin{frame}{Comentários}
\protect\hypertarget{comentuxe1rios}{}
O nosso primeiro programa não tem algo importante:

\begin{block}{{documentação}}
\protect\hypertarget{documentauxe7uxe3o}{}
\end{block}
\end{frame}

\begin{frame}[fragile]
Os programas devem ter várias informações sobre o programa em si,
e.g.~autor, propósito, etc.

\begin{Shaded}
\begin{Highlighting}[]
\CommentTok{/* Nome: hello\_world.c*/}
\CommentTok{/* Autor: Diogo Silva*/}
\CommentTok{/* Proposito: Mostrar "Hello world!" na consola.*/}
\PreprocessorTok{\#include }\ImportTok{\textless{}stdio.h\textgreater{}}

\DataTypeTok{int}\NormalTok{ main}\OperatorTok{()\{}
\NormalTok{    printf}\OperatorTok{(}\StringTok{"Hello world!"}\OperatorTok{);}
    \ControlFlowTok{return} \DecValTok{0}\OperatorTok{;}
\OperatorTok{\}}
\end{Highlighting}
\end{Shaded}

No C, escrevemos comentários entre \texttt{/*\ */}. Todo o texto entre
estes símbolos é ignorado pelo comentário, i.e.~não é interpretado como
código.
\end{frame}

\begin{frame}[fragile]
\begin{Shaded}
\begin{Highlighting}[]
\CommentTok{/*}
\CommentTok{Nome: hello\_world.c}
\CommentTok{Autor: Diogo Silva}
\CommentTok{Proposito: Mostrar "Hello world!" na consola.}
\CommentTok{*/}
\PreprocessorTok{\#include }\ImportTok{\textless{}stdio.h\textgreater{}}

\DataTypeTok{int}\NormalTok{ main}\OperatorTok{()\{}
\NormalTok{    printf}\OperatorTok{(}\StringTok{"Hello world!"}\OperatorTok{);}
    \ControlFlowTok{return} \DecValTok{0}\OperatorTok{;}
\OperatorTok{\}}
\end{Highlighting}
\end{Shaded}

Um comentário pode compreender várias linhas.
\end{frame}

\begin{frame}[fragile]
Também podemos escrever comentários de apenas uma linha com o símbolo
\texttt{//}.

Tudo o que vem depois deste símbolo é interpretado como um comentário.

\begin{Shaded}
\begin{Highlighting}[]
\PreprocessorTok{\#include }\ImportTok{\textless{}stdio.h\textgreater{}}

\DataTypeTok{int}\NormalTok{ main}\OperatorTok{()\{}
\NormalTok{    printf}\OperatorTok{(}\StringTok{"Hello world!"}\OperatorTok{);} \CommentTok{// escrever na consola}
    \ControlFlowTok{return} \DecValTok{0}\OperatorTok{;}
\OperatorTok{\}}
\end{Highlighting}
\end{Shaded}

A legibilidade do programa aumenta bastante quando existem comentários
que descrevem de forma sumária porções do código.
\end{frame}

\begin{frame}
\end{frame}

\begin{frame}{Variáveis}
\protect\hypertarget{variuxe1veis}{}
A maior parte dos programas executa uma série de cálculos.

Para isso, precisam de um mecanismo para guardar dados de forma
temporária.

É para isso que servem as \textbf{variáveis}.
\end{frame}

\begin{frame}
As \textbf{variáveis} são locais na memória onde é possível gravar algum
dado, temporáriamente, durante a execução do programa.
\end{frame}

\begin{frame}
\begin{block}{Variáveis \textgreater{} Tipos}
\protect\hypertarget{variuxe1veis-tipos}{}
No C, todas as variáveis têm um \textbf{tipo} associado.

O C tem vários tipos de dados, mas para já usaremos apenas 2 tipos
numéricos:

\begin{itemize}
\tightlist
\item
  int (inteiro)
\item
  float (real, \emph{floating point})
\end{itemize}
\end{block}
\end{frame}

\begin{frame}[fragile]
Uma analogia aos tipos são os domínios na matemática, e.g.~\texttt{int}
pode ser comparado ao dominio dos números naturais.

Associado a um tipo, existe: - um conjunto de valores válidos
(e.g.~números inteiros positivos até 65.535) - operações válidas nos
valores desse tipo (+ - * /)
\end{frame}

\begin{frame}[fragile]
Diferentes tipos incluem diferentes conjuntos de valores válidos.

O C tem vários \texttt{int} que incluem diferentes intervalos de valores
possíveis e.g.~típicamente, \texttt{int} inclui valores inteiros no
intervalo \texttt{{[}-65536,\ 65535{]}}.
\end{frame}

\begin{frame}[fragile]
O \texttt{float} inclui valores muito maiores que um \texttt{int}, e
contempla valores reais, e.g.~3.14.

Operações aritméticas em \texttt{float} podem ser mais lentas.
\end{frame}

\begin{frame}[fragile]
\begin{block}{Variáveis \textgreater{} declaração}
\protect\hypertarget{variuxe1veis-declarauxe7uxe3o}{}
Quando queremos usar uma variável, esta tem de ser declarada.

\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{int}\NormalTok{ altura}\OperatorTok{;} \CommentTok{// em cm}
\DataTypeTok{float}\NormalTok{ massa}\OperatorTok{;} \CommentTok{// em kg}
\end{Highlighting}
\end{Shaded}

\texttt{altura} é uma variável do tipo \texttt{int} e \texttt{massa} é
uma variável do tipo \texttt{float}.
\end{block}
\end{frame}

\begin{frame}[fragile]
Também podemos declarar várias variáveis de um determinado tipo numa só
linha.

\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{int}\NormalTok{ altura}\OperatorTok{,}\NormalTok{ idade}\OperatorTok{;} \CommentTok{// cm, meses}
\DataTypeTok{float}\NormalTok{ massa}\OperatorTok{,}\NormalTok{ lucro}\OperatorTok{;} \CommentTok{// kg, €}
\end{Highlighting}
\end{Shaded}
\end{frame}

\begin{frame}[fragile]
\begin{block}{Variáveis \textgreater{} atribuição}
\protect\hypertarget{variuxe1veis-atribuiuxe7uxe3o}{}
As variáveis recebem valores através da instrução de atribuição
\texttt{=}.

\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{int}\NormalTok{ altura}\OperatorTok{;} \CommentTok{// em cm}
\DataTypeTok{float}\NormalTok{ massa}\OperatorTok{;} \CommentTok{// em kg}

\NormalTok{altura }\OperatorTok{=} \DecValTok{180}\OperatorTok{;}
\NormalTok{massa }\OperatorTok{=} \FloatTok{75.2}\OperatorTok{;}
\end{Highlighting}
\end{Shaded}

\texttt{altura} tem agora o valor \texttt{180} e \texttt{massa} tem o
valor \texttt{75.2}

\texttt{180} e \texttt{75.2} são constantes.
\end{block}
\end{frame}

\begin{frame}[fragile]
Depois das variáveis terem um valor atribuido, podem ser usadas no
cálculo de outros valores.

\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{int}\NormalTok{ altura}\OperatorTok{;} \CommentTok{// em cm}
\DataTypeTok{float}\NormalTok{ massa}\OperatorTok{,}\NormalTok{ imc}\OperatorTok{;} \CommentTok{// em kg}

\NormalTok{altura }\OperatorTok{=} \DecValTok{180}\OperatorTok{;}
\NormalTok{massa }\OperatorTok{=} \FloatTok{75.2}\OperatorTok{;}
\NormalTok{imc }\OperatorTok{=}\NormalTok{ massa }\OperatorTok{/} \OperatorTok{(}\NormalTok{altura }\OperatorTok{/} \FloatTok{100.0}\OperatorTok{);} \CommentTok{//indice massa corporal}
\end{Highlighting}
\end{Shaded}
\end{frame}

\begin{frame}[fragile]
As variáveis só podem ser usadas depois de declaradas. Ver linha 3.

\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{int}\NormalTok{ altura}\OperatorTok{;} \CommentTok{// em cm}

\NormalTok{massa }\OperatorTok{=} \FloatTok{75.2}\OperatorTok{;}

\DataTypeTok{float}\NormalTok{ massa}\OperatorTok{,}\NormalTok{ imc}\OperatorTok{;} \CommentTok{// em kg}

\NormalTok{altura }\OperatorTok{=} \DecValTok{180}\OperatorTok{;}

\NormalTok{imc }\OperatorTok{=}\NormalTok{ massa }\OperatorTok{/} \OperatorTok{(}\NormalTok{altura }\OperatorTok{/} \FloatTok{100.0}\OperatorTok{);} \CommentTok{//indice massa corporal}
\end{Highlighting}
\end{Shaded}

Este código é inválido porque estamos a atribuir um valor à variável
\texttt{massa}, que ainda não foi declarada.
\end{frame}

\begin{frame}[fragile]
\begin{block}{Variáveis \textgreater{} printf}
\protect\hypertarget{variuxe1veis-printf}{}
Se quisermos mostrar o valor de uma determinada variável, podemos usar
novamente a função \texttt{printf}.

\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{int}\NormalTok{ altura}\OperatorTok{;} \CommentTok{// em cm}
\DataTypeTok{float}\NormalTok{ massa}\OperatorTok{,}\NormalTok{ imc}\OperatorTok{;} \CommentTok{// em kg}

\NormalTok{altura }\OperatorTok{=} \DecValTok{180}\OperatorTok{;}
\NormalTok{massa }\OperatorTok{=} \FloatTok{75.2}\OperatorTok{;}
\NormalTok{printf}\OperatorTok{(}\StringTok{"Altura: }\SpecialCharTok{\%d\textbackslash{}n}\StringTok{"}\OperatorTok{,}\NormalTok{ altura}\OperatorTok{);}
\end{Highlighting}
\end{Shaded}

O que significa o símbolo \texttt{\%d}?
\end{block}
\end{frame}

\begin{frame}[fragile]
\texttt{\%d} indica como é que o valor contido na variável
\texttt{altura} deve ser interpretado.

Neste caso, \texttt{\%d} indica que deve ser interpretado como um valor
inteiro \texttt{int}.

O descritor escolhido deve ser coerente com o tipo da variável que se
vai mostrar.

\texttt{altura} é do tipo \texttt{int}, logo usamos o descritor
\texttt{\%d}.
\end{frame}

\begin{frame}[fragile]
\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{int}\NormalTok{ altura}\OperatorTok{;} \CommentTok{// em cm}
\DataTypeTok{float}\NormalTok{ massa}\OperatorTok{,}\NormalTok{ imc}\OperatorTok{;} \CommentTok{// em kg}

\NormalTok{altura }\OperatorTok{=} \DecValTok{180}\OperatorTok{;}
\NormalTok{massa }\OperatorTok{=} \FloatTok{75.2}\OperatorTok{;}
\NormalTok{imc }\OperatorTok{=}\NormalTok{ massa }\OperatorTok{/} \OperatorTok{(}\NormalTok{altura }\OperatorTok{/} \FloatTok{100.0}\OperatorTok{);} \CommentTok{//indice massa corporal}
\NormalTok{printf}\OperatorTok{(}\StringTok{"Indice massa corporal: }\SpecialCharTok{\%f\textbackslash{}n}\StringTok{"}\OperatorTok{,}\NormalTok{ imc}\OperatorTok{);}
\end{Highlighting}
\end{Shaded}

O descritor \texttt{\%f} é usado para valores do tipo \texttt{float}.
\end{frame}

\begin{frame}[fragile]
\begin{itemize}
\tightlist
\item
  \texttt{int} -\textgreater{} \texttt{\%d}
\item
  \texttt{float} -\textgreater{} \texttt{\%f}
\end{itemize}

\begin{tcolorbox}[enhanced jigsaw, colback=white, colbacktitle=quarto-callout-caution-color!10!white, opacitybacktitle=0.6, coltitle=black, title=\textcolor{quarto-callout-caution-color}{\faFire}\hspace{0.5em}{Importante}, colframe=quarto-callout-caution-color-frame, left=2mm, breakable, bottomrule=.15mm, toprule=.15mm, toptitle=1mm, opacityback=0, arc=.35mm, titlerule=0mm, bottomtitle=1mm, leftrule=.75mm, rightrule=.15mm]

O C não impede um ``desalinhamento'' entre tipo e descritor - é
responsabildiade do programador garantir a coerência.

\end{tcolorbox}
\end{frame}

\begin{frame}[fragile]
\begin{block}{Variáveis \textgreater{} \texttt{printf} de expressões}
\protect\hypertarget{variuxe1veis-printf-de-expressuxf5es}{}
O cálculo do IMC na variável intermédia \texttt{imc} é desnecessário,
uma vez que podemos inserir a \textbf{expressão} completa do cálculo na
função \texttt{printf}.

\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{int}\NormalTok{ altura}\OperatorTok{;} \CommentTok{// em cm}
\DataTypeTok{float}\NormalTok{ massa}\OperatorTok{,}\NormalTok{ imc}\OperatorTok{;} \CommentTok{// em kg}

\NormalTok{altura }\OperatorTok{=} \DecValTok{180}\OperatorTok{;}
\NormalTok{massa }\OperatorTok{=} \FloatTok{75.2}\OperatorTok{;}
\NormalTok{printf}\OperatorTok{(}\StringTok{"Indice massa corporal: }\SpecialCharTok{\%f\textbackslash{}n}\StringTok{"}\OperatorTok{,}\NormalTok{ massa }\OperatorTok{/} \OperatorTok{(}\NormalTok{altura }\OperatorTok{/} \FloatTok{100.0}\OperatorTok{));}
\end{Highlighting}
\end{Shaded}
\end{block}
\end{frame}

\begin{frame}
\begin{block}{O que é uma \textbf{expressão}?}
\protect\hypertarget{o-que-uxe9-uma-expressuxe3o}{}
\begin{itemize}
\tightlist
\item
  Uma expressão é algo que produz um valor concreto.
\item
  \textbf{Uma expressão produz sempre um valor com um valor concreto},
  mesmo quando variáveis de tipos diferentes são misturadas (conversão
  automática de tipos será abordada posteriormente.)
\item
  Um valor de um determinado tipo pode sempre ser substituido por uma
  expressão do mesmo tipo.
\end{itemize}
\end{block}
\end{frame}

\begin{frame}
\begin{block}{Variáveis \textgreater{} inicialização}
\protect\hypertarget{variuxe1veis-inicializauxe7uxe3o}{}
\begin{itemize}
\tightlist
\item
  Algumas variáveis são automaticamente inicializadas com o valor de 0
  quando são declaradas, mas a maior parte não é.
\item
  Uma variável que não tenha um valor por defeito e que não tenha
  sofrido nenhuma atribuição está \textbf{não inicializada}.
\end{itemize}
\end{block}
\end{frame}

\begin{frame}[fragile]
É importante perceber que o C permite que uma variável seja usada em
cálculos, mesmo não tenha sido inicializada.

\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{int}\NormalTok{ altura}\OperatorTok{;} \CommentTok{// em cm}
\DataTypeTok{float}\NormalTok{ massa}\OperatorTok{,}\NormalTok{ imc}\OperatorTok{;} \CommentTok{// em kg}

\NormalTok{massa }\OperatorTok{=} \FloatTok{75.2}\OperatorTok{;}
\NormalTok{imc }\OperatorTok{=}\NormalTok{ massa }\OperatorTok{/} \OperatorTok{(}\NormalTok{altura }\OperatorTok{/} \FloatTok{100.0}\OperatorTok{);} \CommentTok{//indice massa corporal}
\end{Highlighting}
\end{Shaded}

É \textbf{responsabilidade do programador saber que o programa pode ter
um comportamento inválido}, porque a variável que não foi inicializada
(não teve nenhuma atribuição) pode conter qualquer valor.
\end{frame}

\begin{frame}[fragile]
As variáveis podem ser inicializadas no momento da sua declaração.

\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{int}\NormalTok{ altura}\OperatorTok{=}\DecValTok{180}\OperatorTok{;} \CommentTok{// em cm}
\DataTypeTok{float}\NormalTok{ massa}\OperatorTok{=}\FloatTok{75.2}\OperatorTok{,}\NormalTok{ imc}\OperatorTok{=}\DecValTok{0}\ErrorTok{.0}\OperatorTok{;} \CommentTok{// em kg}
\end{Highlighting}
\end{Shaded}
\end{frame}

\begin{frame}
\begin{block}{Exercício}
\protect\hypertarget{exercuxedcio}{}
\begin{itemize}
\tightlist
\item
  Conversão de Fahrenheit para Celsius.
\item
  \(C = \frac{5}{9}(F-32)\)
\end{itemize}
\end{block}
\end{frame}

\begin{frame}[fragile]{I/O receber valores}
\protect\hypertarget{io-receber-valores}{}
Já sabemos mostrar valores ao utilizador do programa, mas como receber
dados?

Usamos a função \texttt{scanf}.
\end{frame}

\begin{frame}[fragile]
A função \texttt{scanf} funciona como o \texttt{printf}, mas na direção
oposta.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{scanf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%d}\StringTok{"}\OperatorTok{,} \OperatorTok{\&}\NormalTok{a}\OperatorTok{);}
\NormalTok{scanf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%f}\StringTok{"}\OperatorTok{,} \OperatorTok{\&}\NormalTok{b}\OperatorTok{);}
\end{Highlighting}
\end{Shaded}

Indicamos o formato dos dados que vamos receber e a variável onde os
queremos guardar.
\end{frame}

\begin{frame}[fragile]
\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{scanf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%d}\StringTok{"}\OperatorTok{,} \OperatorTok{\&}\NormalTok{a}\OperatorTok{);}  \CommentTok{// receber altura do utilizador}
\NormalTok{scanf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%f}\StringTok{"}\OperatorTok{,} \OperatorTok{\&}\NormalTok{b}\OperatorTok{);}  \CommentTok{// receber altura do utilizador}
\end{Highlighting}
\end{Shaded}

Assumindo que já foram declaradas, qual será o tipo das variáveis
\texttt{a} e \texttt{b}?

Sabemos que \texttt{\%d} funciona com valores \texttt{int}, logo
\texttt{a} deverá ser do tipo \texttt{int}.

Na mesma linha, \texttt{b} deverá ser um \texttt{float}.
\end{frame}

\begin{frame}[fragile]
E o que significa o \texttt{\&} antes do nome das variáveis?

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{scanf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%d}\StringTok{"}\OperatorTok{,} \OperatorTok{\&}\NormalTok{a}\OperatorTok{);}
\NormalTok{scanf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%f}\StringTok{"}\OperatorTok{,} \OperatorTok{\&}\NormalTok{b}\OperatorTok{);}
\end{Highlighting}
\end{Shaded}

É um operador que devolve o \emph{endereço de memória} da variável.

Iremos explorar este operador em detalhe no futuro. Até lá, saibam
apenas que usamos quase sempre o \texttt{\&} antes do nome da variável.
\end{frame}

\begin{frame}
\begin{block}{Exercício}
\protect\hypertarget{exercuxedcio-1}{}
Conversão de ºF para ºC.

Alterar o exercício anterior para receber os valores do utilizador.
\end{block}
\end{frame}

\begin{frame}{Constantes}
\protect\hypertarget{constantes}{}
\end{frame}

\begin{frame}[fragile]
O que faz este programa?

\begin{Shaded}
\begin{Highlighting}[]
\PreprocessorTok{\#include }\ImportTok{\textless{}stdio.h\textgreater{}}

\DataTypeTok{int}\NormalTok{ main}\OperatorTok{()\{}
    \DataTypeTok{float}\NormalTok{ r}\OperatorTok{;}
\NormalTok{    printf}\OperatorTok{(}\StringTok{"Insira o raio do circulo[cm]:"}\OperatorTok{);}
\NormalTok{    scanf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%f}\StringTok{"}\OperatorTok{,} \OperatorTok{\&}\NormalTok{r}\OperatorTok{);}

\NormalTok{    printf}\OperatorTok{(}\StringTok{"Perimetro do circulo: }\SpecialCharTok{\%f}\StringTok{"}\OperatorTok{,} \DecValTok{2} \OperatorTok{*} \FloatTok{3.1415} \OperatorTok{*}\NormalTok{ r}\OperatorTok{);}
\NormalTok{    printf}\OperatorTok{(}\StringTok{"Area do circulo: }\SpecialCharTok{\%f}\StringTok{"}\OperatorTok{,} \FloatTok{3.1415} \OperatorTok{*}\NormalTok{ r }\OperatorTok{*}\NormalTok{ r}\OperatorTok{);}
    \ControlFlowTok{return} \DecValTok{0}\OperatorTok{;}
\OperatorTok{\}}
\end{Highlighting}
\end{Shaded}

Neste programa o valor 3.1415, o valor do π repete-se.

Seria útil se pudéssemos fazer referência a este valor com um
identificador em todo o programa.
\end{frame}

\begin{frame}[fragile]
O C tem uma diretiva que nos permite fazer exatamente isso.

\begin{Shaded}
\begin{Highlighting}[]
\PreprocessorTok{\#include }\ImportTok{\textless{}stdio.h\textgreater{}}
\PreprocessorTok{\#define PI }\FloatTok{3.1415}

\DataTypeTok{int}\NormalTok{ main}\OperatorTok{()\{}
    \CommentTok{//...}

\NormalTok{    printf}\OperatorTok{(}\StringTok{"Perimetro do circulo: }\SpecialCharTok{\%f}\StringTok{"}\OperatorTok{,} \DecValTok{2} \OperatorTok{*}\NormalTok{ PI }\OperatorTok{*}\NormalTok{ r}\OperatorTok{);}
\NormalTok{    printf}\OperatorTok{(}\StringTok{"Area do circulo: }\SpecialCharTok{\%f}\StringTok{"}\OperatorTok{,}\NormalTok{ PI }\OperatorTok{*}\NormalTok{ r }\OperatorTok{*}\NormalTok{ r}\OperatorTok{);}
    \ControlFlowTok{return} \DecValTok{0}\OperatorTok{;}
\OperatorTok{\}}
\end{Highlighting}
\end{Shaded}

A diretiva \texttt{\#define} permite-nos definir constantes que, durante
o préprocessamento, são substituidas pelo valor especificado.
\end{frame}

\begin{frame}
Por convenção, os nomes das constantes são sempre em letras maíusculas e
os nomes das variáveis são em minúsculas.
\end{frame}

\begin{frame}{Identificadores}
\protect\hypertarget{identificadores}{}
Os nomes que escolhemos para as nossas variáveis, funções, etc.
designam-se por \emph{identificadores} e existem regras que devem ser
seguidas.
\end{frame}

\begin{frame}[fragile]
Exemplos de identificadores válidos

\begin{Shaded}
\begin{Highlighting}[]
\ExtensionTok{times10}\NormalTok{ proximo\_numero \_altura alturaMAX}
\end{Highlighting}
\end{Shaded}

Exemplos de identificadores inválidos

\begin{Shaded}
\begin{Highlighting}[]
\ExtensionTok{10times}\NormalTok{ proximo{-}numero}
\end{Highlighting}
\end{Shaded}

O caracter \texttt{-} é inválido, mas \texttt{\_} é aceite.
\end{frame}

\begin{frame}[fragile]
Os identificadores são sensíveis a letras maísculas e minúsculas,
e.g.~\texttt{alturaMAX} e \texttt{alturamax} seriam 2 identificadores
distintos num programa.

Existe um conjunto de palavras-chave que não podem ser usadas. Estas
correspondem a elementos intrínsecos ao C, como o nome dos tipos básicos
e dos ciclos, e.g.~\texttt{int}, \texttt{while}.
\end{frame}

\begin{frame}[fragile]
Outros exemplos:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{int float double char void long short typedef}
\NormalTok{if else switch default}
\NormalTok{while do for continue break }
\NormalTok{struct enum union}
\end{Highlighting}
\end{Shaded}

\begin{tcolorbox}[enhanced jigsaw, colback=white, colbacktitle=quarto-callout-caution-color!10!white, opacitybacktitle=0.6, coltitle=black, title=\textcolor{quarto-callout-caution-color}{\faFire}\hspace{0.5em}{Importante}, colframe=quarto-callout-caution-color-frame, left=2mm, breakable, bottomrule=.15mm, toprule=.15mm, toptitle=1mm, opacityback=0, arc=.35mm, titlerule=0mm, bottomtitle=1mm, leftrule=.75mm, rightrule=.15mm]

O uso do nome de funções frequentemente usadas e pertencentes à
biblioteca \emph{standard} do C também é de evitar,
e.g.~\texttt{printf}, \texttt{scanf}, \ldots{}

\end{tcolorbox}
\end{frame}



\end{document}
