% Options for packages loaded elsewhere
\PassOptionsToPackage{unicode}{hyperref}
\PassOptionsToPackage{hyphens}{url}
%
\documentclass[
  ignorenonframetext,
]{beamer}
\usepackage{pgfpages}
\setbeamertemplate{caption}[numbered]
\setbeamertemplate{caption label separator}{: }
\setbeamercolor{caption name}{fg=normal text.fg}
\beamertemplatenavigationsymbolsempty
% Prevent slide breaks in the middle of a paragraph
\widowpenalties 1 10000
\raggedbottom
\setbeamertemplate{part page}{
  \centering
  \begin{beamercolorbox}[sep=16pt,center]{part title}
    \usebeamerfont{part title}\insertpart\par
  \end{beamercolorbox}
}
\setbeamertemplate{section page}{
  \centering
  \begin{beamercolorbox}[sep=12pt,center]{part title}
    \usebeamerfont{section title}\insertsection\par
  \end{beamercolorbox}
}
\setbeamertemplate{subsection page}{
  \centering
  \begin{beamercolorbox}[sep=8pt,center]{part title}
    \usebeamerfont{subsection title}\insertsubsection\par
  \end{beamercolorbox}
}
\AtBeginPart{
  \frame{\partpage}
}
\AtBeginSection{
  \ifbibliography
  \else
    \frame{\sectionpage}
  \fi
}
\AtBeginSubsection{
  \frame{\subsectionpage}
}

\usepackage{amsmath,amssymb}
\usepackage{iftex}
\ifPDFTeX
  \usepackage[T1]{fontenc}
  \usepackage[utf8]{inputenc}
  \usepackage{textcomp} % provide euro and other symbols
\else % if luatex or xetex
  \usepackage{unicode-math}
  \defaultfontfeatures{Scale=MatchLowercase}
  \defaultfontfeatures[\rmfamily]{Ligatures=TeX,Scale=1}
\fi
\usepackage{lmodern}
\ifPDFTeX\else  
    % xetex/luatex font selection
\fi
% Use upquote if available, for straight quotes in verbatim environments
\IfFileExists{upquote.sty}{\usepackage{upquote}}{}
\IfFileExists{microtype.sty}{% use microtype if available
  \usepackage[]{microtype}
  \UseMicrotypeSet[protrusion]{basicmath} % disable protrusion for tt fonts
}{}
\makeatletter
\@ifundefined{KOMAClassName}{% if non-KOMA class
  \IfFileExists{parskip.sty}{%
    \usepackage{parskip}
  }{% else
    \setlength{\parindent}{0pt}
    \setlength{\parskip}{6pt plus 2pt minus 1pt}}
}{% if KOMA class
  \KOMAoptions{parskip=half}}
\makeatother
\usepackage{xcolor}
\newif\ifbibliography
\setlength{\emergencystretch}{3em} % prevent overfull lines
\setcounter{secnumdepth}{-\maxdimen} % remove section numbering

\usepackage{color}
\usepackage{fancyvrb}
\newcommand{\VerbBar}{|}
\newcommand{\VERB}{\Verb[commandchars=\\\{\}]}
\DefineVerbatimEnvironment{Highlighting}{Verbatim}{commandchars=\\\{\}}
% Add ',fontsize=\small' for more characters per line
\usepackage{framed}
\definecolor{shadecolor}{RGB}{241,243,245}
\newenvironment{Shaded}{\begin{snugshade}}{\end{snugshade}}
\newcommand{\AlertTok}[1]{\textcolor[rgb]{0.68,0.00,0.00}{#1}}
\newcommand{\AnnotationTok}[1]{\textcolor[rgb]{0.37,0.37,0.37}{#1}}
\newcommand{\AttributeTok}[1]{\textcolor[rgb]{0.40,0.45,0.13}{#1}}
\newcommand{\BaseNTok}[1]{\textcolor[rgb]{0.68,0.00,0.00}{#1}}
\newcommand{\BuiltInTok}[1]{\textcolor[rgb]{0.00,0.23,0.31}{#1}}
\newcommand{\CharTok}[1]{\textcolor[rgb]{0.13,0.47,0.30}{#1}}
\newcommand{\CommentTok}[1]{\textcolor[rgb]{0.37,0.37,0.37}{#1}}
\newcommand{\CommentVarTok}[1]{\textcolor[rgb]{0.37,0.37,0.37}{\textit{#1}}}
\newcommand{\ConstantTok}[1]{\textcolor[rgb]{0.56,0.35,0.01}{#1}}
\newcommand{\ControlFlowTok}[1]{\textcolor[rgb]{0.00,0.23,0.31}{#1}}
\newcommand{\DataTypeTok}[1]{\textcolor[rgb]{0.68,0.00,0.00}{#1}}
\newcommand{\DecValTok}[1]{\textcolor[rgb]{0.68,0.00,0.00}{#1}}
\newcommand{\DocumentationTok}[1]{\textcolor[rgb]{0.37,0.37,0.37}{\textit{#1}}}
\newcommand{\ErrorTok}[1]{\textcolor[rgb]{0.68,0.00,0.00}{#1}}
\newcommand{\ExtensionTok}[1]{\textcolor[rgb]{0.00,0.23,0.31}{#1}}
\newcommand{\FloatTok}[1]{\textcolor[rgb]{0.68,0.00,0.00}{#1}}
\newcommand{\FunctionTok}[1]{\textcolor[rgb]{0.28,0.35,0.67}{#1}}
\newcommand{\ImportTok}[1]{\textcolor[rgb]{0.00,0.46,0.62}{#1}}
\newcommand{\InformationTok}[1]{\textcolor[rgb]{0.37,0.37,0.37}{#1}}
\newcommand{\KeywordTok}[1]{\textcolor[rgb]{0.00,0.23,0.31}{#1}}
\newcommand{\NormalTok}[1]{\textcolor[rgb]{0.00,0.23,0.31}{#1}}
\newcommand{\OperatorTok}[1]{\textcolor[rgb]{0.37,0.37,0.37}{#1}}
\newcommand{\OtherTok}[1]{\textcolor[rgb]{0.00,0.23,0.31}{#1}}
\newcommand{\PreprocessorTok}[1]{\textcolor[rgb]{0.68,0.00,0.00}{#1}}
\newcommand{\RegionMarkerTok}[1]{\textcolor[rgb]{0.00,0.23,0.31}{#1}}
\newcommand{\SpecialCharTok}[1]{\textcolor[rgb]{0.37,0.37,0.37}{#1}}
\newcommand{\SpecialStringTok}[1]{\textcolor[rgb]{0.13,0.47,0.30}{#1}}
\newcommand{\StringTok}[1]{\textcolor[rgb]{0.13,0.47,0.30}{#1}}
\newcommand{\VariableTok}[1]{\textcolor[rgb]{0.07,0.07,0.07}{#1}}
\newcommand{\VerbatimStringTok}[1]{\textcolor[rgb]{0.13,0.47,0.30}{#1}}
\newcommand{\WarningTok}[1]{\textcolor[rgb]{0.37,0.37,0.37}{\textit{#1}}}

\providecommand{\tightlist}{%
  \setlength{\itemsep}{0pt}\setlength{\parskip}{0pt}}\usepackage{longtable,booktabs,array}
\usepackage{calc} % for calculating minipage widths
\usepackage{caption}
% Make caption package work with longtable
\makeatletter
\def\fnum@table{\tablename~\thetable}
\makeatother
\usepackage{graphicx}
\makeatletter
\def\maxwidth{\ifdim\Gin@nat@width>\linewidth\linewidth\else\Gin@nat@width\fi}
\def\maxheight{\ifdim\Gin@nat@height>\textheight\textheight\else\Gin@nat@height\fi}
\makeatother
% Scale images if necessary, so that they will not overflow the page
% margins by default, and it is still possible to overwrite the defaults
% using explicit options in \includegraphics[width, height, ...]{}
\setkeys{Gin}{width=\maxwidth,height=\maxheight,keepaspectratio}
% Set default figure placement to htbp
\makeatletter
\def\fps@figure{htbp}
\makeatother

\makeatletter
\makeatother
\makeatletter
\makeatother
\makeatletter
\@ifpackageloaded{caption}{}{\usepackage{caption}}
\AtBeginDocument{%
\ifdefined\contentsname
  \renewcommand*\contentsname{Table of contents}
\else
  \newcommand\contentsname{Table of contents}
\fi
\ifdefined\listfigurename
  \renewcommand*\listfigurename{List of Figures}
\else
  \newcommand\listfigurename{List of Figures}
\fi
\ifdefined\listtablename
  \renewcommand*\listtablename{List of Tables}
\else
  \newcommand\listtablename{List of Tables}
\fi
\ifdefined\figurename
  \renewcommand*\figurename{Figure}
\else
  \newcommand\figurename{Figure}
\fi
\ifdefined\tablename
  \renewcommand*\tablename{Table}
\else
  \newcommand\tablename{Table}
\fi
}
\@ifpackageloaded{float}{}{\usepackage{float}}
\floatstyle{ruled}
\@ifundefined{c@chapter}{\newfloat{codelisting}{h}{lop}}{\newfloat{codelisting}{h}{lop}[chapter]}
\floatname{codelisting}{Listing}
\newcommand*\listoflistings{\listof{codelisting}{List of Listings}}
\makeatother
\makeatletter
\@ifpackageloaded{caption}{}{\usepackage{caption}}
\@ifpackageloaded{subcaption}{}{\usepackage{subcaption}}
\makeatother
\makeatletter
\@ifpackageloaded{tcolorbox}{}{\usepackage[skins,breakable]{tcolorbox}}
\makeatother
\makeatletter
\@ifundefined{shadecolor}{\definecolor{shadecolor}{rgb}{.97, .97, .97}}
\makeatother
\makeatletter
\makeatother
\makeatletter
\makeatother
\ifLuaTeX
  \usepackage{selnolig}  % disable illegal ligatures
\fi
\IfFileExists{bookmark.sty}{\usepackage{bookmark}}{\usepackage{hyperref}}
\IfFileExists{xurl.sty}{\usepackage{xurl}}{} % add URL line breaks if available
\urlstyle{same} % disable monospaced font for URLs
\hypersetup{
  pdftitle={Tipos básicos do C},
  pdfauthor={CAP Diogo Silva},
  hidelinks,
  pdfcreator={LaTeX via pandoc}}

\title{Tipos básicos do C}
\author{CAP Diogo Silva}
\date{}
\institute{Academia da Força Aérea}
\logo{\includegraphics{afa.svg}}

\begin{document}
\frame{\titlepage}
\ifdefined\Shaded\renewenvironment{Shaded}{\begin{tcolorbox}[frame hidden, interior hidden, boxrule=0pt, breakable, borderline west={3pt}{0pt}{shadecolor}, enhanced, sharp corners]}{\end{tcolorbox}}\fi

\renewcommand*\contentsname{Table of contents}
\begin{frame}[allowframebreaks]
  \frametitle{Table of contents}
  \tableofcontents[hideallsubsections]
\end{frame}
\begin{frame}{Tipos básicos do C}
\protect\hypertarget{tipos-buxe1sicos-do-c}{}
\end{frame}

\begin{frame}{Inteiros}
\protect\hypertarget{inteiros}{}
\end{frame}

\begin{frame}[fragile]
Até agora usámos apenas o tipo \texttt{int} para representar números
inteiros, mas existem outros:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{short int}
\NormalTok{unsigned short int}

\NormalTok{int}
\NormalTok{unsigned int}

\NormalTok{long int}
\NormalTok{unsigned lont int}
\end{Highlighting}
\end{Shaded}
\end{frame}

\begin{frame}[fragile]
Diferentes tipos podem representar números inteiros em diferentes
intervalos e ocupam mais ou menos espaço em memória.

Estes intervalos e espaço ocupado em memória pode variar de máquina para
máquina, mas é garantido que:

\texttt{short\ int\ \textless{}\ int\ \textless{}\ long\ int}
\end{frame}

\begin{frame}
Processadores com arquitecturas de 64 bits começam a ser comuns e os
intervalos de valores comuns são:
\end{frame}

\begin{frame}[fragile]
Uma forma rápida de verificar os limites de um determinado tipo numa
máquina, é usar a biblioteca \texttt{\textless{}limits.h\textgreater{}}.

\begin{Shaded}
\begin{Highlighting}[]
\PreprocessorTok{\#include }\ImportTok{\textless{}limits.h\textgreater{}}
\PreprocessorTok{\#include }\ImportTok{\textless{}stdio.h\textgreater{}}

\DataTypeTok{int}\NormalTok{ main}\OperatorTok{(}\DataTypeTok{void}\OperatorTok{)} \OperatorTok{\{}
  \DataTypeTok{int}\NormalTok{ v}\OperatorTok{;}
\NormalTok{  printf}\OperatorTok{(}\StringTok{"max long=}\SpecialCharTok{\%ld\textbackslash{}n}\StringTok{"}\OperatorTok{,}\NormalTok{ LONG\_MAX}\OperatorTok{);}
\OperatorTok{\}}
\end{Highlighting}
\end{Shaded}

Lista de todas as constantes na
\href{https://man7.org/linux/man-pages/man0/limits.h.0p.html}{documentação
da biblioteca}.

https://man7.org/linux/man-pages/man0/limits.h.0p.html
\end{frame}

\begin{frame}[fragile]{Inteiros}
\protect\hypertarget{inteiros-1}{}
\begin{block}{Constantes}
\protect\hypertarget{constantes}{}
Até agora definimos constantes de inteiros no formato decimal simples,
i.e.~usando 10 digitos distintos.

\begin{Shaded}
\begin{Highlighting}[]
\PreprocessorTok{\#include }\ImportTok{\textless{}limits.h\textgreater{}}
\PreprocessorTok{\#include }\ImportTok{\textless{}stdio.h\textgreater{}}

\DataTypeTok{int}\NormalTok{ main}\OperatorTok{(}\DataTypeTok{void}\OperatorTok{)} \OperatorTok{\{}
  \DataTypeTok{int}\NormalTok{ v }\OperatorTok{=} \DecValTok{42}\OperatorTok{;}  \CommentTok{// 42 é constante de inteiro}
\OperatorTok{\}}
\end{Highlighting}
\end{Shaded}
\end{block}
\end{frame}

\begin{frame}
Mas existem outras formas.

É possível definir constantes em formato octal e hexadecimal. Não iremos
explorar estas bases, mas veremos como escrever constantes de inteiros
diferentes.
\end{frame}

\begin{frame}[fragile]
\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{15L  {-}\textgreater{} interpretar 15 como um long int}
\NormalTok{15U  {-}\textgreater{} interpretar 15 como um unsigned int}
\NormalTok{15UL {-}\textgreater{} interpretar 15 como um unsigned long int}
\end{Highlighting}
\end{Shaded}

Também se pode escrever U e L em minúsculas. Pode-se escrever UL ou LU.
\end{frame}

\begin{frame}[fragile]
\begin{block}{Overflow}
\protect\hypertarget{overflow}{}
Como vimos anteriormente, os tipos inteiros têm um valor máximo e mínimo
que podem representar.

\begin{Shaded}
\begin{Highlighting}[]
\PreprocessorTok{\#include }\ImportTok{\textless{}limits.h\textgreater{}}
\PreprocessorTok{\#include }\ImportTok{\textless{}stdio.h\textgreater{}}

\DataTypeTok{int}\NormalTok{ main}\OperatorTok{(}\DataTypeTok{void}\OperatorTok{)} \OperatorTok{\{}
  \DataTypeTok{int}\NormalTok{ v }\OperatorTok{=}\NormalTok{ INT\_MAX}\OperatorTok{;}
\NormalTok{  printf}\OperatorTok{(}\StringTok{"v=}\SpecialCharTok{\%d\textbackslash{}n}\StringTok{"}\OperatorTok{,}\NormalTok{ v}\OperatorTok{);}
\NormalTok{  printf}\OperatorTok{(}\StringTok{"v=}\SpecialCharTok{\%d\textbackslash{}n}\StringTok{"}\OperatorTok{,}\NormalTok{ v}\OperatorTok{+}\DecValTok{1}\OperatorTok{);}
  \ControlFlowTok{return} \DecValTok{0}\OperatorTok{;}
\OperatorTok{\}}
\end{Highlighting}
\end{Shaded}

\begin{itemize}
\tightlist
\item
  \texttt{v\ =\ ?}
\item
  \texttt{v\ +\ 1\ =\ ?}
\end{itemize}
\end{block}
\end{frame}

\begin{frame}[fragile]
\begin{Shaded}
\begin{Highlighting}[]
\PreprocessorTok{\#include }\ImportTok{\textless{}limits.h\textgreater{}}
\PreprocessorTok{\#include }\ImportTok{\textless{}stdio.h\textgreater{}}

\DataTypeTok{int}\NormalTok{ main}\OperatorTok{(}\DataTypeTok{void}\OperatorTok{)} \OperatorTok{\{}
  \DataTypeTok{int}\NormalTok{ v }\OperatorTok{=}\NormalTok{ INT\_MAX}\OperatorTok{;}
\NormalTok{  printf}\OperatorTok{(}\StringTok{"v=}\SpecialCharTok{\%d\textbackslash{}n}\StringTok{"}\OperatorTok{,}\NormalTok{ v}\OperatorTok{);}
\NormalTok{  printf}\OperatorTok{(}\StringTok{"v=}\SpecialCharTok{\%d\textbackslash{}n}\StringTok{"}\OperatorTok{,}\NormalTok{ v}\OperatorTok{+}\DecValTok{1}\OperatorTok{);}
  \ControlFlowTok{return} \DecValTok{0}\OperatorTok{;}
\OperatorTok{\}}
\end{Highlighting}
\end{Shaded}

\begin{itemize}
\tightlist
\item
  \texttt{v\ \ \ \ \ =\ 2147483647}
\item
  \texttt{v\ +\ 1\ =\ -2147483648}
\end{itemize}
\end{frame}

\begin{frame}[fragile]
\begin{block}{printf e scanf}
\protect\hypertarget{printf-e-scanf}{}
\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{scanf("\%u", \&v);  // unsigned int}
\NormalTok{printf("\%u", v);   }

\NormalTok{scanf("\%hd", \&v);  // short int}
\NormalTok{printf("\%hd", v);}

\NormalTok{scanf("\%hu", \&v);  // unsigned short int}
\NormalTok{printf("\%hu", v);}

\NormalTok{scanf("\%ld", \&v);  // long int}
\NormalTok{printf("\%ld", v);  }

\NormalTok{scanf("\%lu", \&v);  // unsigned long int}
\NormalTok{printf("\%lu", v);}
\end{Highlighting}
\end{Shaded}
\end{block}
\end{frame}

\begin{frame}[fragile]{Reais}
\protect\hypertarget{reais}{}
\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{float}
\NormalTok{double}
\NormalTok{long double}
\end{Highlighting}
\end{Shaded}

--

O long double não aparece porque os intervalos variam bastante de
máquina para máquina.
\end{frame}

\begin{frame}[fragile]
\begin{block}{constantes}
\protect\hypertarget{constantes-1}{}
Diferentes formas de escrever o número 57:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{57.0}
\NormalTok{57.}
\NormalTok{57.0e0}
\NormalTok{57E0}
\NormalTok{5.7e1}
\NormalTok{5.7e+1}
\NormalTok{.57e2}
\NormalTok{570.e{-}1}
\end{Highlighting}
\end{Shaded}
\end{block}
\end{frame}

\begin{frame}[fragile]
\begin{block}{printf scanf}
\protect\hypertarget{printf-scanf}{}
\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{double d;}
\NormalTok{scanf("lf", \&d);}
\NormalTok{printf("lf", d);}

\NormalTok{long double ld;}
\NormalTok{scanf("\%Lf", \&ld);}
\NormalTok{printf("\%Lf", ld);}
\end{Highlighting}
\end{Shaded}
\end{block}
\end{frame}

\begin{frame}{Texto}
\protect\hypertarget{texto}{}
\begin{block}{char}
\protect\hypertarget{char}{}
\end{block}
\end{frame}

\begin{frame}[fragile]
\begin{block}{char}
\protect\hypertarget{char-1}{}
Até agora usámos texto apenas no contexto do scanf e print.

O C tem um tipo para texto: o char.

\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{char}\NormalTok{ letra }\OperatorTok{=} \CharTok{\textquotesingle{}C\textquotesingle{}}\OperatorTok{;}
\end{Highlighting}
\end{Shaded}

\begin{itemize}
\tightlist
\item
  Um char guarda 1 letra.
\item
  As constantes de char são escritas com plicas '\,'. Não confundir com
  as aspas ``\,'' usadas para strings (e.g.~o printf e scanf).
\end{itemize}
\end{block}
\end{frame}

\begin{frame}
Internamente, um char é apenas um número inteiro que pode ser
interpretado como letras, através da tabela ASCII.

\begin{figure}

{\centering \includegraphics{img/7_basic_types/ascii.png}

}

\caption{ascii}

\end{figure}

ASCII = American standard Code for Information Interchange
\end{frame}

\begin{frame}[fragile]
Não precisamos de saber esta correspondência, porque podemos sempre
interpretar um char como um inteiro e vice-versa.

\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{char}\NormalTok{ letra }\OperatorTok{=} \CharTok{\textquotesingle{}A\textquotesingle{}}\OperatorTok{;}
\NormalTok{printf}\OperatorTok{(}\StringTok{"A letra }\SpecialCharTok{\%c}\StringTok{ tem o valor }\SpecialCharTok{\%d\textbackslash{}n}\StringTok{"}\OperatorTok{,}\NormalTok{ letra}\OperatorTok{,}\NormalTok{ letra}\OperatorTok{);}  \CommentTok{// A 65}
\end{Highlighting}
\end{Shaded}

A especificação de conversão para char é o \%c.
\end{frame}

\begin{frame}[fragile]
Por serem números inteiros, podemos realizar operações aritméticas sobre
char.

\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{char}\NormalTok{ letra }\OperatorTok{=} \CharTok{\textquotesingle{}C\textquotesingle{}}\OperatorTok{;}
\NormalTok{printf}\OperatorTok{(}\StringTok{"A letra depois do }\SpecialCharTok{\%c}\StringTok{ = }\SpecialCharTok{\%c\textbackslash{}n}\StringTok{"}\OperatorTok{,}\NormalTok{ letra}\OperatorTok{,}\NormalTok{ letra}\OperatorTok{+}\DecValTok{1}\OperatorTok{);}  \CommentTok{// C D}
\end{Highlighting}
\end{Shaded}

\begin{Shaded}
\begin{Highlighting}[]
\CommentTok{// abecedário completado em maísculas}
\ControlFlowTok{for}\OperatorTok{(}\DataTypeTok{char}\NormalTok{ l}\OperatorTok{=}\CharTok{\textquotesingle{}A\textquotesingle{}}\OperatorTok{;}\NormalTok{ l}\OperatorTok{\textless{}}\CharTok{\textquotesingle{}Z\textquotesingle{}}\OperatorTok{;}\NormalTok{ l}\OperatorTok{++)}
\NormalTok{  printf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%c}\StringTok{,"}\NormalTok{l}\OperatorTok{);}
\NormalTok{printf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\textbackslash{}n}\StringTok{"}\OperatorTok{);}
\end{Highlighting}
\end{Shaded}
\end{frame}

\begin{frame}[fragile]
Tal como vimos para os tipos inteiros, o char também pode ser signed ou
unsigned.

\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{char}\NormalTok{ n }\OperatorTok{=} \DecValTok{127}\OperatorTok{+}\DecValTok{1}\OperatorTok{;}
\NormalTok{printf}\OperatorTok{(}\StringTok{"n=}\SpecialCharTok{\%d\textbackslash{}n}\StringTok{"}\OperatorTok{,}\NormalTok{ n}\OperatorTok{);} \CommentTok{// {-}128}

\DataTypeTok{unsigned} \DataTypeTok{char}\NormalTok{ n2 }\OperatorTok{=} \DecValTok{255}\OperatorTok{+}\DecValTok{1}\OperatorTok{;}
\NormalTok{printf}\OperatorTok{(}\StringTok{"n2=}\SpecialCharTok{\%d\textbackslash{}n}\StringTok{"}\OperatorTok{,}\NormalTok{ n2}\OperatorTok{);}  \CommentTok{// 0}
\end{Highlighting}
\end{Shaded}

Também está sujeito a overflow.
\end{frame}

\begin{frame}[fragile]
\begin{itemize}
\tightlist
\item
  Já usámos anteriormente caracteres especiais,
  e.g.~\texttt{\textquotesingle{}\textbackslash{}n\textquotesingle{}} e
  \texttt{\textquotesingle{}\textbackslash{}t\textquotesingle{}}.
  Existem outros.
\item
  Alguns só podem ser especificados em formato octal ou hexadecimal.
\end{itemize}
\end{frame}

\begin{frame}
\begin{block}{scanf}
\protect\hypertarget{scanf}{}
\begin{itemize}
\tightlist
\item
  Quando o scanf acaba de processar um determinado input, existem
  caracteres que ficam por consumir.
\item
  Como todos os caracteres são válidos para o tipo char, isso pode ser
  um problema.
\end{itemize}
\end{block}
\end{frame}

\begin{frame}[fragile]
\begin{block}{scanf}
\protect\hypertarget{scanf-1}{}
\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{char}\NormalTok{ c1}\OperatorTok{,}\NormalTok{ c2}\OperatorTok{;}
\NormalTok{printf}\OperatorTok{(}\StringTok{"Introduza um caracter:"}\OperatorTok{);}
\NormalTok{scanf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%c}\StringTok{"}\OperatorTok{,} \OperatorTok{\&}\NormalTok{c1}\OperatorTok{);}

\NormalTok{printf}\OperatorTok{(}\StringTok{"Introduza outro caracter:"}\OperatorTok{);}
\NormalTok{scanf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%c}\StringTok{"}\OperatorTok{,} \OperatorTok{\&}\NormalTok{c2}\OperatorTok{);}

\NormalTok{printf}\OperatorTok{(}\StringTok{"c1=}\SpecialCharTok{\%c}\StringTok{   c2=}\SpecialCharTok{\%c}\StringTok{  }\SpecialCharTok{\textbackslash{}n}\StringTok{"}\OperatorTok{,}\NormalTok{ c1}\OperatorTok{,}\NormalTok{ c2}\OperatorTok{);}
\end{Highlighting}
\end{Shaded}

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{Introduza um caracter:a}
\NormalTok{Introduza outro caracter:c1=a   c2=}
  
\end{Highlighting}
\end{Shaded}

\begin{itemize}
\tightlist
\item
  Aparentemente, o segundo scanf foi ignorado:

  \begin{itemize}
  \tightlist
  \item
    o utilizador não escreveu nada
  \item
    o que estaria depois de c2= está vazio
  \end{itemize}
\end{itemize}
\end{block}
\end{frame}

\begin{frame}[fragile]
\begin{itemize}
\tightlist
\item
  Na verdade, o primeiro scanf deixa um enter
  \texttt{\textquotesingle{}\textbackslash{}n\textquotesingle{}} por
  consumir.
\item
  No scanf seguinte, o que é pedido é um char.
\item
  Como \texttt{\textquotesingle{}n\textquotesingle{}} é um char válido,
  a especificação de conversão aceita-o como input
\item
  Deixa de ser necessário pedir input ao utilizador porque as
  especificações de conversão já foram satisfeitas.
\end{itemize}
\end{frame}

\begin{frame}[fragile]
Como confirmar? Vamos interpretar c2 como um inteiro.

\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{char}\NormalTok{ c1}\OperatorTok{,}\NormalTok{ c2}\OperatorTok{;}
\NormalTok{printf}\OperatorTok{(}\StringTok{"Introduza um caracter:"}\OperatorTok{);}
\NormalTok{scanf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%c}\StringTok{"}\OperatorTok{,} \OperatorTok{\&}\NormalTok{c1}\OperatorTok{);}

\NormalTok{printf}\OperatorTok{(}\StringTok{"Introduza outro caracter:"}\OperatorTok{);}
\NormalTok{scanf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%c}\StringTok{"}\OperatorTok{,} \OperatorTok{\&}\NormalTok{c2}\OperatorTok{);}

\NormalTok{printf}\OperatorTok{(}\StringTok{"c1=}\SpecialCharTok{\%c}\StringTok{   c2=}\SpecialCharTok{\%d}\StringTok{  }\SpecialCharTok{\textbackslash{}n}\StringTok{"}\OperatorTok{,}\NormalTok{ c1}\OperatorTok{,}\NormalTok{ c2}\OperatorTok{);}
\end{Highlighting}
\end{Shaded}

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{Introduza um caracter:a}
\NormalTok{Introduza outro caracter:c1=a   c2=10}
\end{Highlighting}
\end{Shaded}
\end{frame}

\begin{frame}
\begin{block}{alternativas para ler e escrever char}
\protect\hypertarget{alternativas-para-ler-e-escrever-char}{}
Existem outras formas de ler e escrever um char. - getchar - putchar
\end{block}
\end{frame}

\begin{frame}[fragile]
\begin{block}{putchar}
\protect\hypertarget{putchar}{}
A função putchar escreve um caracter na consola.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{putchar}\OperatorTok{(}\CharTok{\textquotesingle{}C\textquotesingle{}}\OperatorTok{);}
\end{Highlighting}
\end{Shaded}
\end{block}

\begin{block}{getchar}
\protect\hypertarget{getchar}{}
A função getchar lê um único char.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{l }\OperatorTok{=}\NormalTok{ getchar}\OperatorTok{();}
\end{Highlighting}
\end{Shaded}

⚠️Tal como no scanf, o getchar não salta espaços em branco quando lê um
char.⚠️
\end{block}
\end{frame}

\begin{frame}[fragile]
E se quisermos ler vários chars?

Usamos um ciclo.

\begin{Shaded}
\begin{Highlighting}[]
\CommentTok{// lê chars até encontrar \textbackslash{}n}
\DataTypeTok{char}\NormalTok{ l}\OperatorTok{;}
\ControlFlowTok{do}\OperatorTok{\{}
\NormalTok{  scanf}\OperatorTok{(}\StringTok{"}\SpecialCharTok{\%c}\StringTok{"}\OperatorTok{,} \OperatorTok{\&}\NormalTok{l}\OperatorTok{);}
\OperatorTok{\}} \ControlFlowTok{while} \OperatorTok{(}\NormalTok{l }\OperatorTok{!=} \CharTok{\textquotesingle{}}\SpecialCharTok{\textbackslash{}n}\CharTok{\textquotesingle{}}\OperatorTok{);}
\end{Highlighting}
\end{Shaded}

\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{char}\NormalTok{ l}\OperatorTok{;}
\ControlFlowTok{while} \OperatorTok{((}\NormalTok{l }\OperatorTok{=}\NormalTok{ getchar}\OperatorTok{())} \OperatorTok{!=} \CharTok{\textquotesingle{}}\SpecialCharTok{\textbackslash{}n}\CharTok{\textquotesingle{}}\OperatorTok{)}
  \OperatorTok{;}
\end{Highlighting}
\end{Shaded}
\end{frame}

\begin{frame}
\begin{block}{exercicio}
\protect\hypertarget{exercicio}{}
\begin{block}{Calcular comprimento de mensagem}
\protect\hypertarget{calcular-comprimento-de-mensagem}{}
\end{block}
\end{block}
\end{frame}

\begin{frame}{Conversão de tipos}
\protect\hypertarget{conversuxe3o-de-tipos}{}
\begin{itemize}
\tightlist
\item
  No C, é possível converter de uns tipos para outros.
\item
  Na verdade, nós já usámos esta funcionalidade sem saber, porque
  existem conversões que são automáticas e implicitas.
\item
  Outras têm de ser explicitamente declaradas.
\end{itemize}
\end{frame}

\begin{frame}
\begin{block}{conversões implicitas}
\protect\hypertarget{conversuxf5es-implicitas}{}
\begin{itemize}
\tightlist
\item
  Quando realizamos operações binárias, o C consegue detectar se os 2
  operandos são do mesmo tipo.
\item
  Se não forem, um dos tipos é convertido no outro, porque as operações
  são feitas com operandos do mesmo tipo.
\item
  O resultado da operação será do tipo ``superior''.
\end{itemize}
\end{block}
\end{frame}

\begin{frame}[fragile]
\begin{block}{conversões implicitas}
\protect\hypertarget{conversuxf5es-implicitas-1}{}
\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{int}\NormalTok{ i}\OperatorTok{;}
\DataTypeTok{float}\NormalTok{ f}\OperatorTok{,}\NormalTok{ p}\OperatorTok{;}
\NormalTok{p }\OperatorTok{=}\NormalTok{ f }\OperatorTok{+}\NormalTok{ i}\OperatorTok{;}
\end{Highlighting}
\end{Shaded}

\begin{itemize}
\tightlist
\item
  Neste caso, o valor de i será convertido para float.
\item
  Se o contrário ocorresse, perdiamos por completo a componente decimal
  de f.
\item
  Desta forma, o pior que pode acontecer é o valor de i perder precisão
  depois de convertido.
\end{itemize}
\end{block}
\end{frame}

\begin{frame}[fragile]
\begin{block}{conversões implicitas \textgreater{} ambos operandos da
mesma ``classe''}
\protect\hypertarget{conversuxf5es-implicitas-ambos-operandos-da-mesma-classe}{}
\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{  reais                 inteiros}

\NormalTok{long double         unsigned long int}
\NormalTok{    \^{}                       \^{}}
\NormalTok{    |                       |}
\NormalTok{  double                long int}
\NormalTok{    \^{}                       \^{}}
\NormalTok{    |                       |}
\NormalTok{  float                unsigned int}
\NormalTok{                            \^{}}
\NormalTok{                            |}
\NormalTok{                           int}
\end{Highlighting}
\end{Shaded}
\end{block}
\end{frame}

\begin{frame}[fragile]
\begin{block}{conversões implicitas \textgreater{} exemplos}
\protect\hypertarget{conversuxf5es-implicitas-exemplos}{}
\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{char}\NormalTok{ c}\OperatorTok{;}
\DataTypeTok{short} \DataTypeTok{int}\NormalTok{ s}\OperatorTok{;}
\DataTypeTok{int}\NormalTok{ i}\OperatorTok{;}
\DataTypeTok{unsigned} \DataTypeTok{int}\NormalTok{ u}\OperatorTok{;}
\DataTypeTok{long} \DataTypeTok{int}\NormalTok{ l}\OperatorTok{;}

\NormalTok{i }\OperatorTok{=}\NormalTok{ i }\OperatorTok{+}\NormalTok{ c}\OperatorTok{;} \CommentTok{// c convertido para int}
\NormalTok{i }\OperatorTok{=}\NormalTok{ i }\OperatorTok{+}\NormalTok{ s}\OperatorTok{;} \CommentTok{// s convertido para int}
\NormalTok{u }\OperatorTok{=}\NormalTok{ u }\OperatorTok{+}\NormalTok{ i}\OperatorTok{;} \CommentTok{// i convertido para unsigned int}
\NormalTok{l }\OperatorTok{=}\NormalTok{ l }\OperatorTok{+}\NormalTok{ u}\OperatorTok{;} \CommentTok{// u convertido para long int}
\end{Highlighting}
\end{Shaded}
\end{block}
\end{frame}

\begin{frame}[fragile]
\begin{block}{conversões implicitas \textgreater{} mais exemplos}
\protect\hypertarget{conversuxf5es-implicitas-mais-exemplos}{}
\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{long} \DataTypeTok{int}\NormalTok{ l}\OperatorTok{;}
\DataTypeTok{unsigned} \DataTypeTok{long} \DataTypeTok{int}\NormalTok{ ul}\OperatorTok{;}
\DataTypeTok{float}\NormalTok{ f}\OperatorTok{;}
\DataTypeTok{double}\NormalTok{ d}\OperatorTok{;}
\DataTypeTok{long} \DataTypeTok{double}\NormalTok{ ld}\OperatorTok{;}

\NormalTok{ul }\OperatorTok{=}\NormalTok{ ul }\OperatorTok{+}\NormalTok{ l}\OperatorTok{;} \CommentTok{// l convertido para unsigned long int}
\NormalTok{f }\OperatorTok{=}\NormalTok{ f }\OperatorTok{+}\NormalTok{ ul}\OperatorTok{;} \CommentTok{// ul convertido para float}
\NormalTok{d }\OperatorTok{=}\NormalTok{ d }\OperatorTok{+}\NormalTok{ f}\OperatorTok{;} \CommentTok{// f convertido para double}
\NormalTok{ld }\OperatorTok{=}\NormalTok{ ld }\OperatorTok{+}\NormalTok{ d }\CommentTok{// d convertido para long double}
\end{Highlighting}
\end{Shaded}
\end{block}
\end{frame}

\begin{frame}[fragile]
\begin{block}{conversões implicitas \textgreater{} atribuição}
\protect\hypertarget{conversuxf5es-implicitas-atribuiuxe7uxe3o}{}
\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{char}\NormalTok{ c}\OperatorTok{;}
\DataTypeTok{int}\NormalTok{ i}\OperatorTok{;}
\DataTypeTok{float}\NormalTok{ f}\OperatorTok{;}
\DataTypeTok{double}\NormalTok{ d}\OperatorTok{;}

\NormalTok{i }\OperatorTok{=}\NormalTok{ c}\OperatorTok{;} \CommentTok{// c convertido para int}
\NormalTok{f }\OperatorTok{=}\NormalTok{ i}\OperatorTok{;} \CommentTok{// i convertido para float}
\NormalTok{d }\OperatorTok{=}\NormalTok{ f}\OperatorTok{;} \CommentTok{// f convertido para double}

\NormalTok{i }\OperatorTok{=} \FloatTok{3.14}\OperatorTok{;} \CommentTok{// 3.14 convertido para 3}
\NormalTok{c }\OperatorTok{=} \DecValTok{10000}\OperatorTok{;} \CommentTok{// overflow}
\NormalTok{f }\OperatorTok{=} \FloatTok{1.0e100}\OperatorTok{;} \CommentTok{// excede limite}
\end{Highlighting}
\end{Shaded}
\end{block}
\end{frame}

\begin{frame}[fragile]
\begin{block}{conversões explicitas \textgreater{} casting}
\protect\hypertarget{conversuxf5es-explicitas-casting}{}
\begin{itemize}
\tightlist
\item
  Para fazer uma conversão explicita, escrevemos o nome do tipo final
  entre parêntises, seguido do valor que queremos converter.
\end{itemize}

\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{float}\NormalTok{ f }\OperatorTok{=} \DecValTok{3} \OperatorTok{/} \DecValTok{2}\OperatorTok{;} \CommentTok{// 1.0 {-}\textgreater{} divisão de inteiros dá inteiro}
\NormalTok{f }\OperatorTok{=} \OperatorTok{(}\DataTypeTok{float}\OperatorTok{)} \DecValTok{3} \OperatorTok{/} \DecValTok{2}\OperatorTok{;} \CommentTok{// 1.5 {-}\textgreater{} converter 3 para float e dividir por 2}
\end{Highlighting}
\end{Shaded}

\begin{itemize}
\tightlist
\item
  O operador de casting é uma operação unária.
\item
  Operações unárias têm precedência sobre operações binárias.
\end{itemize}
\end{block}
\end{frame}

\begin{frame}[fragile]
\begin{block}{conversões explicitas \textgreater{} casting}
\protect\hypertarget{conversuxf5es-explicitas-casting-1}{}
Quando realizamos algumas operações aritméticas, pode ser necessário
fazer uma conversão explicita.

\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{long}\NormalTok{ i}\OperatorTok{;}
\DataTypeTok{int}\NormalTok{ j }\OperatorTok{=} \DecValTok{10000}\OperatorTok{;} \CommentTok{// 10000 * 10000 {-}\textgreater{} 100 000 000}

\NormalTok{i }\OperatorTok{=}\NormalTok{ j }\OperatorTok{*}\NormalTok{ j}\OperatorTok{;}
\end{Highlighting}
\end{Shaded}

\begin{itemize}
\tightlist
\item
  O resultado da multiplicação na linha 4 cabe na variável i de tipo
  long.
\item
  Contudo, o resultado da operação será um int e em algumas máquinas o
  resultado pode levar a overflow.
\end{itemize}
\end{block}
\end{frame}

\begin{frame}[fragile]
\begin{block}{conversões explicitas \textgreater{} casting}
\protect\hypertarget{conversuxf5es-explicitas-casting-2}{}
\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{long}\NormalTok{ i}\OperatorTok{;}
\DataTypeTok{int}\NormalTok{ j }\OperatorTok{=} \DecValTok{10000}\OperatorTok{;} \CommentTok{// 10000 * 10000 {-}\textgreater{} 100 000 000}

\NormalTok{i }\OperatorTok{=}\NormalTok{ j }\OperatorTok{*}\NormalTok{ j}\OperatorTok{;}

\NormalTok{i }\OperatorTok{=} \OperatorTok{(}\DataTypeTok{long}\OperatorTok{)}\NormalTok{ j }\OperatorTok{*}\NormalTok{ j}\OperatorTok{;}

\NormalTok{i }\OperatorTok{=} \OperatorTok{(}\DataTypeTok{long}\OperatorTok{)} \OperatorTok{(}\NormalTok{j }\OperatorTok{*}\NormalTok{ j}\OperatorTok{);} \CommentTok{// ERRADO}
\end{Highlighting}
\end{Shaded}

\begin{itemize}
\tightlist
\item
  Para resolver isso, podemos fazer o cast da linha 6.
\item
  Na linha 8, a multiplicação é feita antes da conversão porque está
  entre ().
\end{itemize}
\end{block}
\end{frame}

\begin{frame}[fragile]{Definições de tipos}
\protect\hypertarget{definiuxe7uxf5es-de-tipos}{}
O C permite a definição de novos tipos com o comando \texttt{typedef}.

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{typedef} \DataTypeTok{int}\NormalTok{ Altura}\OperatorTok{;}
\end{Highlighting}
\end{Shaded}

\begin{itemize}
\tightlist
\item
  typedef é seguido do nome original do tipo
\item
  e depois do novo nome que queremos usar
\end{itemize}
\end{frame}

\begin{frame}[fragile]
\begin{block}{typedef}
\protect\hypertarget{typedef}{}
\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{typedef} \DataTypeTok{int}\NormalTok{ Altura}\OperatorTok{;}
\KeywordTok{typedef} \DataTypeTok{int}\NormalTok{ Massa}\OperatorTok{;}
\NormalTok{Altura a }\OperatorTok{=} \DecValTok{180}\OperatorTok{;}
\NormalTok{Massa m }\OperatorTok{=} \DecValTok{75}\OperatorTok{;}
\end{Highlighting}
\end{Shaded}

\begin{itemize}
\tightlist
\item
  Essencialmente, o que fizemos foi criar um int com um novo nome.
\item
  Útil para tornar o código mais legível
\end{itemize}
\end{block}
\end{frame}

\begin{frame}[fragile]
\begin{block}{typedef}
\protect\hypertarget{typedef-1}{}
\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{typedef} \DataTypeTok{int}\NormalTok{ Altura}\OperatorTok{;}
\KeywordTok{typedef} \DataTypeTok{int}\NormalTok{ massa}\OperatorTok{;}  \CommentTok{// aceite, mas não é convenção}

\DataTypeTok{int}\NormalTok{ main}\OperatorTok{()\{}
  \CommentTok{//...}
\OperatorTok{\}}
\end{Highlighting}
\end{Shaded}

\begin{itemize}
\tightlist
\item
  As definições de tipo ocorrem fora de qualquer função, tipicamente
  após os \#include.
\item
  Os nomes dos tipos obedecem às mesmas regras dos nomes das variáveis.
\item
  É convenção no C, capitalizar os nomes dos tipos.
\end{itemize}
\end{block}
\end{frame}

\begin{frame}[fragile]{\texttt{sizeof}}
\protect\hypertarget{sizeof}{}
A função sizeof recebe um valor ou um tipo e indica qual é o tamanho, em
bytes, que esse tipo ocupa em memória.

\begin{Shaded}
\begin{Highlighting}[]
\DataTypeTok{char}\NormalTok{ c}\OperatorTok{;}
\NormalTok{printf}\OperatorTok{(}\StringTok{"size of int = }\SpecialCharTok{\%lu}\StringTok{ bytes}\SpecialCharTok{\textbackslash{}n}\StringTok{"}\OperatorTok{,} \KeywordTok{sizeof}\OperatorTok{(}\DataTypeTok{int}\OperatorTok{));}  \CommentTok{// 4}
\NormalTok{printf}\OperatorTok{(}\StringTok{"size of char = }\SpecialCharTok{\%lu}\StringTok{ bytes}\SpecialCharTok{\textbackslash{}n}\StringTok{"}\OperatorTok{,} \KeywordTok{sizeof}\OperatorTok{(}\FloatTok{3.14}\OperatorTok{));}  \CommentTok{// 8 {-}\textgreater{} double}
\NormalTok{printf}\OperatorTok{(}\StringTok{"size of char = }\SpecialCharTok{\%lu}\StringTok{ bytes}\SpecialCharTok{\textbackslash{}n}\StringTok{"}\OperatorTok{,} \KeywordTok{sizeof}\OperatorTok{(}\NormalTok{c}\OperatorTok{));}  \CommentTok{// 1}
\end{Highlighting}
\end{Shaded}
\end{frame}



\end{document}
